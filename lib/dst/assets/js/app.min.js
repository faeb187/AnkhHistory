require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function() {
  var $$, Modernizr, obs, site;
  // REQUIRE local files
  $$ = require('./helpers/dom');
  obs = require('./helpers/obs');
  site = require('./helpers/site');
  
  // REQUIRE npm modules
  require('browsernizr/test/proximity');
  require('browsernizr/test/battery');
  require('browsernizr/test/ambientlight');
  require('browsernizr/test/notification');
  Modernizr = require('browsernizr');
  document.title = 'BeKB';
  site.load(location.pathname.slice(1) || 'care');
  obs.f('ankh-ready');
})();

},{"./helpers/dom":"/helpers/dom","./helpers/obs":"/helpers/obs","./helpers/site":"/helpers/site","browsernizr":18,"browsernizr/test/ambientlight":50,"browsernizr/test/battery":51,"browsernizr/test/notification":52,"browsernizr/test/proximity":53}],2:[function(require,module,exports){
/*
  @CONF   todo
  @AUTHOR faeb187
*/
module.exports = {
  id: 'careTodo',
  name: 'div',
  text: 'careTodo'
};

},{}],3:[function(require,module,exports){
/*
  @CONF   header
  @AUTHOR faeb187
*/
module.exports = {
  id: 'h',
  name: 'header'
};

},{}],4:[function(require,module,exports){
/*
  @CONF   nav toggle
  @AUTHOR faeb187
*/
module.exports = {
  id: 'navToggle',
  name: 'icon',
  icon: 'menu-outline'
};

},{}],5:[function(require,module,exports){
/*
  @CONF   todo
  @AUTHOR faeb187
*/
module.exports = {
  id: 'partnerTodo',
  name: 'div',
  text: 'partnerTodo'
};

},{}],6:[function(require,module,exports){
/*
  @CONF   todo
  @AUTHOR faeb187
*/
module.exports = {
  id: 'reportsTodo',
  name: 'div',
  text: 'reportsTodo'
};

},{}],7:[function(require,module,exports){
module.exports = {
  ids: [
    {
      id: 'back',
      ids: []
    },
    {
      id: 'front',
      ids: [
        {
          id: 'cnt',
          ids: [
            {
              id: 'header',
              ids: [
                {
                  id: 'nav'
                }
              ]
            },
            {
              id: 'main',
              ids: []
            }
          ]
        },
        {
          id: 'footer',
          ids: [
            {
              id: 'copyright'
            },
            {
              id: 'lang'
            }
          ]
        }
      ]
    },
    {
      id: 'navToggle'
    }
  ]
};

},{}],8:[function(require,module,exports){
var care, design;

design = require('../designs/bekb');

care = JSON.parse(JSON.stringify(design));

care.ids[1].ids[0].ids[1].ids = [
  {
    id: 'careTodo'
  }
];

module.exports = care;

},{"../designs/bekb":7}],9:[function(require,module,exports){
var design, partner;

design = require('../designs/bekb');

partner = JSON.parse(JSON.stringify(design));

partner.ids[1].ids[0].ids[1].ids = [
  {
    id: 'partnerTodo'
  }
];

module.exports = partner;

},{"../designs/bekb":7}],10:[function(require,module,exports){
var design, reports;

design = require('../designs/bekb');

reports = JSON.parse(JSON.stringify(design));

reports.ids[1].ids[0].ids[1].ids = [
  {
    id: 'reportsTodo'
  }
];

module.exports = reports;

},{"../designs/bekb":7}],11:[function(require,module,exports){
/*
  UI HTML
  @AUTHOR faeb187
*/
module.exports = (function() {
  var $$, supported;
  // @REQUIRE local modules
  // @PRIVATE
  $$ = require('../helpers/dom');
  
  // @DEFINE supported {[string]} list of supported tagNames
  // @PRIVATE
  supported = ['header', 'main', 'footer', 'section', 'img', 'small', 'h1', 'h2', 'h3'];
  return {
    
    // @DESC   builds new html node
    // @PARAM  opt.id      MAN {string}  ui id
    // @PARAM  opt.target  MAN {node}    target node
    // @RETURN {node}  ui
    // @PUBLIC
    init: function(opt) {
      var $t, $ui, alt, cn, id, name, src, txt;
      // DEFINE variables
      opt = opt || {};
      id = opt.id;
      cn = opt.className;
      name = opt.name;
      src = opt.src;
      alt = opt.alt;
      txt = opt.text;
      $t = opt.target;
      if (!id || !name || !$t) {
        return;
      }
      // CHECK support of tagName
      // DEF   div
      if (supported.indexOf(name) === -1) {
        name = 'div';
      }
      
      // CREATE node
      $ui = $$('<' + name + '/>');
      $ui.id = id;
      // IMAGE
      if (src && alt) {
        $ui.setAttribute('src', src);
        $ui.setAttribute('data-lang', alt);
      // TEXT
      } else if (txt) {
        $ui.setAttribute('data-lang', txt);
      }
      // CLASSES
      if (cn) {
        $ui.className = cn;
      }
      // APPEND UI to target
      $t.appendChild($ui);
      // RETURN UI
      return $ui;
    }
  };
})();

},{"../helpers/dom":"/helpers/dom"}],12:[function(require,module,exports){
/*
  UI icon (ion-icon)
  @AUTHOR faeb187
*/
module.exports = (function() {
  var $$;
  // @REQUIRE local modules
  // @PRIVATE
  $$ = require('../helpers/dom');
  return {
    
    // @DESC   displays icon
    // @PARAM  opt.id      MAN {string}  ui id
    // @PARAM  opt.icon    MAN {string}  ion icon name
    // @PARAM  opt.target  MAN {node}    target node
    // @RETURN {node}  ui

    // @PUBLIC
    init: function(opt) {
      var $t, $ui, icon, id, name;
      // DEFINE variables
      opt = opt || {};
      id = opt.id;
      name = opt.name;
      icon = opt.icon;
      $t = opt.target;
      if (!id || !name || !$t) {
        return;
      }
      // CREATE node
      $ui = $$('<ion-icon/>', {
        id: id,
        name: icon
      });
      // APPEND UI to target
      $t.appendChild($ui);
      // RETURN UI
      return $ui;
    }
  };
})();

},{"../helpers/dom":"/helpers/dom"}],13:[function(require,module,exports){
// IMPORTS
module.exports = (function() {
  var $$, $ui, changeLang, def, lib, self, state;
  
  // PRIVATE

  state = require('../helpers/state');
  $$ = require('../helpers/dom');
  self = $ui = null;
  // @DESC   click event to switch lang
  // @PARAM  e {event} click on anchor
  // @RETURN {void}
  changeLang = function(e) {
    var $a;
    e.preventDefault();
    $a = e.target;
    // update lang
    self.update({
      id: $ui.id,
      lang: $a.getAttribute('lang')
    });
    // update 'active' class
    $$('.active', $a.parentNode).className = '';
    return $a.className = 'active';
  };
  // variables
  def = 'de';
  // language library
  lib = {
    // german
    de: {
      care: "Betreuung",
      careTodo: "Betreuung Todo",
      copyright: "&copy; bekb.ch. Alle Rechte vorbehalten.",
      partner: "Partner",
      partnerTodo: "Partner Todo",
      products: "Produkte",
      productsAdditional: "Zusatzprodukte",
      reports: "Berichte",
      reportsTodo: "Berichte Todo"
    },
    // english
    en: {
      care: "Care",
      careTodo: "Care Todo",
      copyright: "&copy; bekb.ch. All rights reserved.",
      partner: "Partner",
      partnerTodo: "PartnerTodo",
      products: "Products",
      productsAdditional: "Zusatzprodukte",
      reports: "Reports",
      reportsTodo: "Reports Todo"
    }
  };
  return {
    
    // @DESC   build new language switcher
    // @PARAM  opt.id      MAN {string}  UI id
    // @PARAM  opt.target  MAN {string}  DOM target id
    // @RETURN {void}

    // PUBLIC

    init: function(opt) {
      var $a, $t, id, idx, k, lang, v;
      self = this;
      opt = opt || {};
      id = opt.id;
      $t = opt.target;
      if (!id || !$t) {
        return;
      }
      // active lang by priority
      // ( localStorage > default )
      lang = state.get({
        id: id
      }) || def;
      
      // UI markup
      $ui = $$('<nav/>', {
        id: id,
        'class': 'ui-lang'
      });
      // iterate through language lib
      idx = 0;
      for (k in lib) {
        v = lib[k];
        $a = $$('<a/>', {
          rel: 'alternate',
          hreflang: k,
          lang: k
        });
        $a.innerText = k;
        // SET active class
        if (k === lang) {
          $a.className = 'active';
        }
        // SWITCH lang on click
        $$.listen($a, 'click', changeLang);
        
        // append UI to DOM target
        $ui.appendChild($a);
      }
      $t.appendChild($ui);
    },
    // @DESC   update language
    // @PARAM  opt.id   MAN {string}  UI id
    // @PARAM  opt.lang  OPT {string}  language code
    // @RETURN {void}
    update: function(opt) {
      var elm, i, id, lang, len, ref, v;
      opt = opt || {};
      id = opt.id;
      if (!id) {
        return;
      }
      // language by priority
      // ( direct change > localStorage > default )
      // !TODO language by geolocation
      lang = opt.lang || state.get({
        id: id
      }) || def;
      ref = $$('[data-lang]');
      // update elements
      for (i = 0, len = ref.length; i < len; i++) {
        elm = ref[i];
        v = lib[lang][elm.getAttribute('data-lang')];
        if (elm.tagName === 'IMG') {
          elm.setAttribute('alt', v);
        } else if (elm.tagName === 'INPUT') {
          elm.setAttribute('placeholder', v);
        } else {
          elm.innerHTML = v;
        }
      }
      
      // set <html> lang attribute
      $$('html').setAttribute('lang', lang);
      // save UI state
      return state.set({
        id: id,
        state: lang
      });
    }
  };
})();

},{"../helpers/dom":"/helpers/dom","../helpers/state":"/helpers/state"}],14:[function(require,module,exports){
/*
  UI LAYOUT
  @AUTHOR faeb187
*/
module.exports = (function() {
  var $$, ui;
  // @REQUIRE local modules
  $$ = require('../helpers/dom');
  ui = {
    
    // @DESC   adds item to flexbox
    // @PARAM  itm         MAN {json}    item conf
    // @PARAM  itm.id      MAN {string}  item id
    // @PARAM  itm.tagName OPT {string}  default 'div'
    // @PARAM  $ui         MAN {node}    flexbox target
    // @RETURN {void}
    addChild: function(itm, $ui) {
      var $itm, elm, id;
      itm = itm || {};
      id = itm.id;
      if (!itm || !$ui) {
        return;
      }
      // CREATE flexbox item
      elm = itm.tagName || 'div';
      $itm = $$('<' + elm + '/>', {
        id: id
      });
      // APPEND item to flexbox
      $ui.appendChild($itm);
      // RETURN item ref
      return $itm;
    }
  };
  return {
    // @DESC   creates a flexbox layout
    // @PARAM  build new flexbox layout
    // @PARAM  opt.direction       OPT {string}  CSS flex-direction
    // @PARAM  opt.alignItems      OPT {string}  CSS align-items
    // @PARAM  opt.justifyContent  OPT {string}  CSS justify-content
    // @PARAM  opt.target          OPT {string}  target node
    // @RETURN {[ node ]}  array of child nodes

    // PUBLIC

    init: function(opt) {
      var $t, $ui, i, itm, itms, len, nt;
      opt = opt || {};
      itms = opt.items;
      $t = opt.target;
      if (!itms || !$t) {
        return;
      }
      // @DEFINE new targets collection
      nt = [];
      // @MARKUP flexbox
      $ui = $$('<div/>', {
        'class': 'ui-flexbox'
      });
      for (i = 0, len = itms.length; i < len; i++) {
        itm = itms[i];
        // @APPEND items to flexbox
        nt.push(ui.addChild(itm, $ui));
      }
      // @APPEND UI to DOM target
      $t.appendChild($ui);
      // @RETURN new targets
      return nt;
    }
  };
})();

},{"../helpers/dom":"/helpers/dom"}],15:[function(require,module,exports){
/*
  UI list
  @AUTHOR faeb187
*/
module.exports = (function() {
  var $$, hammer, obs, state, ui;
  // @REQUIRE local modules
  // @PRIVATE
  $$ = require('../helpers/dom');
  obs = require('../helpers/obs');
  state = require('../helpers/state');
  hammer = require('hammerjs');
  // @DEFINE ui  {json}  UI variables/methods
  // @PRIVATE
  ui = {
    // @DESC   adds list item to list
    // @PARAM  itm                   MAN {json}    list item
    // @PARAM  itm.lang              MAN {string}  lang ref (text or img alt)
    // @PARAM  itm.path              MAN {string}  href
    // @PARAM  itm.type              OPT {string}  adds data-[ type ] = true
    // @PARAM  itm.active            OPT {boolean} default active item
    // @PARAM  itm.src               OPT {string}  image src attribute
    // @PARAM  itm.icon              OPT {string}  icon class name
    // @PARAM  itm.events            OPT {json}    custom events
    // @PARAM  itm.events.click      OPT {[json]}  list of 'click' events
    // @PARAM  itm.events.click.ev   OPT {string}  custom event name
    // @PARAM  itm.events.click.arg  OPT {*}       event handler param
    // @PARAM  itms                  OPT {todo}    sub items
    // @PARAM  $ui                   MAN {node}    list node
    // @TODO   only <a> when click event
    addListItem: function(itm, $ul) {
      var $itm, $li, $subUl, act, evs, href, i, icon, id, lang, len, src, subItm, subItms, type;
      act = itm.active;
      id = itm.id;
      itm = itm || {};
      evs = itm.events;
      lang = itm.lang;
      act = itm.active;
      src = itm.src;
      icon = itm.icon;
      href = itm.path;
      type = itm.type;
      subItms = itm.items;
      if (!lang) {
        return;
      }
      // MARKUP list item
      $li = $$('<li/>');
      if (src) {
        $itm = $$('<img/>', {
          src: src
        });
      } else {
        $itm = $$('<a/>', {
          id: id
        });
      }
      if (href) {
        $itm.setAttribute("href", href);
      }
      $itm.setAttribute('data-lang', lang);
      if (act) {
        $$.addClass($itm, 'active');
      }
      if (type) {
        $itm.setAttribute('data-' + type, true);
      }
      if (icon) {
        $itm.appendChild($$('<i/>', {
          'class': icon
        }));
      }
      // BIND custom events
      if (evs) {
        $itm.events = evs;
        if (evs.click) {
          $itm.onclick = ui.evs.click;
        }
      }
      // hand      = hammer $itm
      // hand.add  new hammer.Tap
      // hand.on   'tap', ui.evs.click

      // HANDLE sub items
      if (subItms) {
        $subUl = $$('<ul/>');
        for (i = 0, len = subItms.length; i < len; i++) {
          subItm = subItms[i];
          ui.addListItem(subItm, $subUl);
        }
        $li.appendChild($subUl);
      }
      // APPEND list item to list
      $li.prepend($itm);
      $ul.appendChild($li);
    },
    // @DEFINE evs {json}  UI events
    evs: {
      // @DESC   fire custom 'click' events
      // @PARAM  e   MAN {event} 'click' event
      // @RETURN {void}
      click: function(e) {
        var $elm, ev, evs, i, len;
        e.preventDefault();
        // GET current & next active item
        $elm = e.target;
        if ($elm.tagName === 'I') {
          $elm = $$.parent($elm);
        }
        
        // FIND custom 'click' events
        evs = $elm.events || {};
        evs = evs.click;
        if (!evs || !evs.length) {
          return;
        }
        // SET active list item
        if ($elm.getAttribute('data-toggle')) {
          $$.toggleClass($elm, 'active');
        } else {
          state.set({
            id: $$.parent($elm, '.ui-list').id,
            state: {
              active: $elm.id
            }
          });
        }
        for (i = 0, len = evs.length; i < len; i++) {
          ev = evs[i];
          if (ev) {
            
            // FIRE custom 'click' events
            obs.f(ev.ev, ev.arg || e);
          }
        }
      }
    }
  };
  return {
    // @DESC   inits a new list
    // @PARAM  opt.events        OPT {json}      events
    // @PARAM  opt.id            MAN {string}    UI id
    // @PARAM  opt.items         MAN {[json]}    array containing list items
    // @PARAM  opt.target        MAN {node}      target node
    // @RETURN {void}
    // @PUBLIC
    init: function(opt) {
      var $t, $ui, act, evs, fx, i, id, itm, itms, len, st;
      opt = opt || {};
      evs = opt.events || {};
      id = opt.id;
      itms = opt.items || [];
      fx = opt.fx || {};
      $t = opt.target;
      if (!id || !itms.length || !$t) {
        return;
      }
      id = "ui-list-" + id;
      // HANDLE active state
      st = state.get({
        id: id
      }) || {};
      act = st.active || itms[0].id;
      // CREATE node
      $ui = $$('<ul/>', {
        id: id,
        class: 'ui-list'
      });
// APPEND list items
      for (i = 0, len = itms.length; i < len; i++) {
        itm = itms[i];
        if (act === itm.id) {
          itm.active = true;
        }
        itm.events = itm.events || evs;
        ui.addListItem(itm, $ui);
      }
      // TMP append UI styles from conf
      $$.css($ui, opt.styl);
      // APPEND UI to target
      $t.appendChild($ui);
      setTimeout(function() {
        return $$.addClass($ui, 'ui-fx-show');
      }, fx.delay || 0);
    }
  };
})();

},{"../helpers/dom":"/helpers/dom","../helpers/obs":"/helpers/obs","../helpers/state":"/helpers/state","hammerjs":54}],16:[function(require,module,exports){
/*
  UI NAV
  @desc   list wrapped in <nav> element
  @author faeb187
*/
module.exports = (function() {
  var $$, uiList;
  
  // PRIVATE

  $$ = require('../helpers/dom');
  uiList = require('./list');
  return {
    // @DESC   init slider
    // @PARAM  opt.id      MAN {string}  UI id
    // @PARAM  opt.type    OPT {string}  only 'sitemap' atm
    // @PARAM  opt.items   MAN {array}   menu items
    // @PARAM  opt.events  OPT {json}    events fallback from item events
    // @PARAM  opt.target  MAN {node}    target node

    // PUBLIC

    init: function(opt) {
      var $t, $ui, evs, id, itms, type;
      opt = opt || {};
      id = opt.id;
      evs = opt.events;
      itms = opt.items;
      $t = opt.target;
      type = opt.type;
      if (!id || !$t || !itms || !itms.length) {
        return;
      }
      // PREVENT popstate behaviour
      window.addEventListener('popstate', function(e) {
        return e.preventDefault();
      });
      
      // UI markup
      $ui = $$('<nav/>', {
        id: id,
        class: 'ui-nav'
      });
      // APPEND nav items
      uiList.init({
        events: evs,
        id: id,
        items: itms,
        target: $ui
      });
      // append UI to target
      $t.appendChild($ui);
    }
  };
})();

},{"../helpers/dom":"/helpers/dom","./list":15}],17:[function(require,module,exports){
/*
  UI SLIDER
  @author faeb187
*/
module.exports = (function() {
  var $$, obs, ui;
  // @REQUIRE local modules
  $$ = require('../helpers/dom');
  obs = require('../helpers/obs');
  // @DEFINE   ui  {json}  UI variables/methods
  // @PRIVATE
  ui = {
    // @DEFINE   $tpl  {node}  UI template
    $tpl: $$('<div/>', {
      'class': 'ui-slider'
    }),
    // @DEFINE   evs   {json}  custom events
    evs: {
      // @DESC   toggle slider state
      // @PARAM  opt.id  MAN {string}  slider id
      // @RETURN {void}
      toggle: function(opt) {
        var $ui, id;
        opt = opt || {};
        id = opt.id;
        $ui = $$('#' + id);
        if (!$ui) {
          return;
        }
        // TOGGLE slider state
        return $$.toggleClass($$('#front'), 'from-' + $ui.side);
      }
    }
  };
  return {
    // @DESC   create a new slider
    // @PARAM  opt.id      MAN {string}  UI id
    // @PARAM  opt.side    MAN {string}  top|right|bottom|left
    // @PARAM  opt.target  MAN {node}    target node
    // @RETURN {node}  target for sub UI's
    // @PUBLIC
    init: function(opt) {
      var $t, $ui, id, side;
      obs.r('ui-slider-toggle');
      opt = opt || {};
      id = opt.id;
      side = opt.side;
      $t = opt.target;
      if (!id || !side || !$t) {
        return;
      }
      // MARKUP slider
      $ui = ui.$tpl.cloneNode();
      $ui.id = id;
      $ui.side = side;
      // REGISTRATE custom events
      obs.l('ui-slider-toggle', ui.evs.toggle);
      // APPEND UI to target
      $t.appendChild($ui);
      // RETURN sub target
      return $ui;
    }
  };
})();

},{"../helpers/dom":"/helpers/dom","../helpers/obs":"/helpers/obs"}],18:[function(require,module,exports){
var Modernizr = require('./lib/Modernizr'),
    ModernizrProto = require('./lib/ModernizrProto'),
    classes = require('./lib/classes'),
    testRunner = require('./lib/testRunner'),
    setClasses = require('./lib/setClasses');

// Run each test
testRunner();

// Remove the "no-js" class if it exists
setClasses(classes);

delete ModernizrProto.addTest;
delete ModernizrProto.addAsyncTest;

// Run the things that are supposed to run after the tests
for (var i = 0; i < Modernizr._q.length; i++) {
  Modernizr._q[i]();
}

module.exports = Modernizr;

},{"./lib/Modernizr":19,"./lib/ModernizrProto":20,"./lib/classes":23,"./lib/setClasses":44,"./lib/testRunner":48}],19:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
  // Fake some of Object.create so we can force non test results to be non "own" properties.
  var Modernizr = function() {};
  Modernizr.prototype = ModernizrProto;

  // Leak modernizr globally when you `require` it rather than force it here.
  // Overwrite name so constructor name is nicer :D
  Modernizr = new Modernizr();

  module.exports = Modernizr;


},{"./ModernizrProto.js":20}],20:[function(require,module,exports){
var tests = require('./tests.js');
  /**
   * ModernizrProto is the constructor for Modernizr
   *
   * @class
   * @access public
   */
  var ModernizrProto = {
    // The current version, dummy
    _version: '3.6.0 (browsernizr 2.3.0)',

    // Any settings that don't work as separate modules
    // can go in here as configuration.
    _config: {
      'classPrefix': '',
      'enableClasses': true,
      'enableJSClass': true,
      'usePrefixes': true
    },

    // Queue of tests
    _q: [],

    // Stub these for people who are listening
    on: function(test, cb) {
      // I don't really think people should do this, but we can
      // safe guard it a bit.
      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
      // This is in case people listen to synchronous tests. I would leave it out,
      // but the code to *disallow* sync tests in the real version of this
      // function is actually larger than this.
      var self = this;
      setTimeout(function() {
        cb(self[test]);
      }, 0);
    },

    addTest: function(name, fn, options) {
      tests.push({name: name, fn: fn, options: options});
    },

    addAsyncTest: function(fn) {
      tests.push({name: null, fn: fn});
    }
  };

  module.exports = ModernizrProto;


},{"./tests.js":49}],21:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var Modernizr = require('./Modernizr.js');
var hasOwnProp = require('./hasOwnProp.js');
var setClasses = require('./setClasses.js');

  // _l tracks listeners for async tests, as well as tests that execute after the initial run
  ModernizrProto._l = {};

  /**
   * Modernizr.on is a way to listen for the completion of async tests. Being
   * asynchronous, they may not finish before your scripts run. As a result you
   * will get a possibly false negative `undefined` value.
   *
   * @memberOf Modernizr
   * @name Modernizr.on
   * @access public
   * @function on
   * @param {string} feature - String name of the feature detect
   * @param {Function} cb - Callback function returning a Boolean - true if feature is supported, false if not
   * @returns {void}
   * @example
   *
   * ```js
   * Modernizr.on('flash', function( result ) {
   *   if (result) {
   *    // the browser has flash
   *   } else {
   *     // the browser does not have flash
   *   }
   * });
   * ```
   */
  ModernizrProto.on = function(feature, cb) {
    // Create the list of listeners if it doesn't exist
    if (!this._l[feature]) {
      this._l[feature] = [];
    }

    // Push this test on to the listener list
    this._l[feature].push(cb);

    // If it's already been resolved, trigger it on next tick
    if (Modernizr.hasOwnProperty(feature)) {
      // Next Tick
      setTimeout(function() {
        Modernizr._trigger(feature, Modernizr[feature]);
      }, 0);
    }
  };

  /**
   * _trigger is the private function used to signal test completion and run any
   * callbacks registered through [Modernizr.on](#modernizr-on)
   *
   * @memberOf Modernizr
   * @name Modernizr._trigger
   * @access private
   * @function _trigger
   * @param {string} feature - string name of the feature detect
   * @param {Function|boolean} [res] - A feature detection function, or the boolean =
   * result of a feature detection function
   * @returns {void}
   */
  ModernizrProto._trigger = function(feature, res) {
    if (!this._l[feature]) {
      return;
    }

    var cbs = this._l[feature];

    // Force async
    setTimeout(function() {
      var i, cb;
      for (i = 0; i < cbs.length; i++) {
        cb = cbs[i];
        cb(res);
      }
    }, 0);

    // Don't trigger these again
    delete this._l[feature];
  };

  /**
   * addTest allows you to define your own feature detects that are not currently
   * included in Modernizr (under the covers it's the exact same code Modernizr
   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)).
   * Just like the official detects, the result
   * will be added onto the Modernizr object, as well as an appropriate className set on
   * the html element when configured to do so
   *
   * @memberOf Modernizr
   * @name Modernizr.addTest
   * @optionName Modernizr.addTest()
   * @optionProp addTest
   * @access public
   * @function addTest
   * @param {string|Object} feature - The string name of the feature detect, or an
   * object of feature detect names and test
   * @param {Function|boolean} test - Function returning true if feature is supported,
   * false if not. Otherwise a boolean representing the results of a feature detection
   * @returns {Object} the Modernizr object to allow chaining
   * @example
   *
   * The most common way of creating your own feature detects is by calling
   * `Modernizr.addTest` with a string (preferably just lowercase, without any
   * punctuation), and a function you want executed that will return a boolean result
   *
   * ```js
   * Modernizr.addTest('itsTuesday', function() {
   *  var d = new Date();
   *  return d.getDay() === 2;
   * });
   * ```
   *
   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,
   * and to `false` every other day of the week. One thing to notice is that the names of
   * feature detect functions are always lowercased when added to the Modernizr object. That
   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.
   *
   *
   *  Since we only look at the returned value from any feature detection function,
   *  you do not need to actually use a function. For simple detections, just passing
   *  in a statement that will return a boolean value works just fine.
   *
   * ```js
   * Modernizr.addTest('hasjquery', 'jQuery' in window);
   * ```
   *
   * Just like before, when the above runs `Modernizr.hasjquery` will be true if
   * jQuery has been included on the page. Not using a function saves a small amount
   * of overhead for the browser, as well as making your code much more readable.
   *
   * Finally, you also have the ability to pass in an object of feature names and
   * their tests. This is handy if you want to add multiple detections in one go.
   * The keys should always be a string, and the value can be either a boolean or
   * function that returns a boolean.
   *
   * ```js
   * var detects = {
   *  'hasjquery': 'jQuery' in window,
   *  'itstuesday': function() {
   *    var d = new Date();
   *    return d.getDay() === 2;
   *  }
   * }
   *
   * Modernizr.addTest(detects);
   * ```
   *
   * There is really no difference between the first methods and this one, it is
   * just a convenience to let you write more readable code.
   */
  function addTest(feature, test) {

    if (typeof feature === 'object') {
      for (var key in feature) {
        if (hasOwnProp(feature, key)) {
          addTest(key, feature[ key ]);
        }
      }
    } else {

      feature = feature.toLowerCase();
      var featureNameSplit = feature.split('.');
      var last = Modernizr[featureNameSplit[0]];

      // Again, we don't check for parent test existence. Get that right, though.
      if (featureNameSplit.length === 2) {
        last = last[featureNameSplit[1]];
      }

      if (typeof last !== 'undefined') {
        // we're going to quit if you're trying to overwrite an existing test
        // if we were to allow it, we'd do this:
        //   var re = new RegExp("\\b(no-)?" + feature + "\\b");
        //   docElement.className = docElement.className.replace( re, '' );
        // but, no rly, stuff 'em.
        return Modernizr;
      }

      test = typeof test === 'function' ? test() : test;

      // Set the value (this is the magic, right here).
      if (featureNameSplit.length === 1) {
        Modernizr[featureNameSplit[0]] = test;
      } else {
        // cast to a Boolean, if not one already
        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
        }

        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;
      }

      // Set a single class (either `feature` or `no-feature`)
      setClasses([(!!test && test !== false ? '' : 'no-') + featureNameSplit.join('-')]);

      // Trigger the event
      Modernizr._trigger(feature, test);
    }

    return Modernizr; // allow chaining.
  }

  // After all the tests are run, add self to the Modernizr prototype
  Modernizr._q.push(function() {
    ModernizrProto.addTest = addTest;
  });

  module.exports = addTest;


},{"./Modernizr.js":19,"./ModernizrProto.js":20,"./hasOwnProp.js":35,"./setClasses.js":44}],22:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var prefixes = require('./cssomPrefixes.js');
  /**
   * atRule returns a given CSS property at-rule (eg @keyframes), possibly in
   * some prefixed form, or false, in the case of an unsupported rule
   *
   * @memberOf Modernizr
   * @name Modernizr.atRule
   * @optionName Modernizr.atRule()
   * @optionProp atRule
   * @access public
   * @function atRule
   * @param {string} prop - String name of the @-rule to test for
   * @returns {string|boolean} The string representing the (possibly prefixed)
   * valid version of the @-rule, or `false` when it is unsupported.
   * @example
   * ```js
   *  var keyframes = Modernizr.atRule('@keyframes');
   *
   *  if (keyframes) {
   *    // keyframes are supported
   *    // could be `@-webkit-keyframes` or `@keyframes`
   *  } else {
   *    // keyframes === `false`
   *  }
   * ```
   */
  var atRule = function(prop) {
    var length = prefixes.length;
    var cssrule = window.CSSRule;
    var rule;

    if (typeof cssrule === 'undefined') {
      return undefined;
    }

    if (!prop) {
      return false;
    }

    // remove literal @ from beginning of provided property
    prop = prop.replace(/^@/, '');

    // CSSRules use underscores instead of dashes
    rule = prop.replace(/-/g, '_').toUpperCase() + '_RULE';

    if (rule in cssrule) {
      return '@' + prop;
    }

    for (var i = 0; i < length; i++) {
      // prefixes gives us something like -o-, and we want O_
      var prefix = prefixes[i];
      var thisRule = prefix.toUpperCase() + '_' + rule;

      if (thisRule in cssrule) {
        return '@-' + prefix.toLowerCase() + '-' + prop;
      }
    }

    return false;
  };

  ModernizrProto.atRule = atRule;

  module.exports = atRule;


},{"./ModernizrProto.js":20,"./cssomPrefixes.js":28}],23:[function(require,module,exports){

  var classes = [];
  module.exports = classes;


},{}],24:[function(require,module,exports){


  /**
   * wrapper around getComputedStyle, to fix issues with Firefox returning null when
   * called inside of a hidden iframe
   *
   * @access private
   * @function computedStyle
   * @param {HTMLElement|SVGElement} elem - The element we want to find the computed styles of
   * @param {string|null} [pseudo] - An optional pseudo element selector (e.g. :before), of null if none
   * @param {string} prop - A CSS property
   * @returns {CSSStyleDeclaration} the value of the specified CSS property
   */
  function computedStyle(elem, pseudo, prop) {
    var result;

    if ('getComputedStyle' in window) {
      result = getComputedStyle.call(window, elem, pseudo);
      var console = window.console;

      if (result !== null) {
        if (prop) {
          result = result.getPropertyValue(prop);
        }
      } else {
        if (console) {
          var method = console.error ? 'error' : 'log';
          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');
        }
      }
    } else {
      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];
    }

    return result;
  }

  module.exports = computedStyle;


},{}],25:[function(require,module,exports){

  /**
   * contains checks to see if a string contains another string
   *
   * @access private
   * @function contains
   * @param {string} str - The string we want to check for substrings
   * @param {string} substr - The substring we want to search the first string for
   * @returns {boolean} true if and only if the first string 'str' contains the second string 'substr'
   */
  function contains(str, substr) {
    return !!~('' + str).indexOf(substr);
  }

  module.exports = contains;


},{}],26:[function(require,module,exports){
var isSVG = require('./isSVG.js');
  /**
   * createElement is a convenience wrapper around document.createElement. Since we
   * use createElement all over the place, this allows for (slightly) smaller code
   * as well as abstracting away issues with creating elements in contexts other than
   * HTML documents (e.g. SVG documents).
   *
   * @access private
   * @function createElement
   * @returns {HTMLElement|SVGElement} An HTML or SVG element
   */
  function createElement() {
    if (typeof document.createElement !== 'function') {
      // This is the case in IE7, where the type of createElement is "object".
      // For this reason, we cannot call apply() as Object is not a Function.
      return document.createElement(arguments[0]);
    } else if (isSVG) {
      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);
    } else {
      return document.createElement.apply(document, arguments);
    }
  }

  module.exports = createElement;


},{"./isSVG.js":38}],27:[function(require,module,exports){

  /**
   * cssToDOM takes a kebab-case string and converts it to camelCase
   * e.g. box-sizing -> boxSizing
   *
   * @access private
   * @function cssToDOM
   * @param {string} name - String name of kebab-case prop we want to convert
   * @returns {string} The camelCase version of the supplied name
   */
  function cssToDOM(name) {
    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {
      return m1 + m2.toUpperCase();
    }).replace(/^-/, '');
  }

  module.exports = cssToDOM;


},{}],28:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var omPrefixes = require('./omPrefixes.js');
  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);
  ModernizrProto._cssomPrefixes = cssomPrefixes;
  module.exports = cssomPrefixes;


},{"./ModernizrProto.js":20,"./omPrefixes.js":42}],29:[function(require,module,exports){

  /**
   * docElement is a convenience wrapper to grab the root element of the document
   *
   * @access private
   * @returns {HTMLElement|SVGElement} The root element of the document
   */
  var docElement = document.documentElement;
  module.exports = docElement;


},{}],30:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var omPrefixes = require('./omPrefixes.js');
  /**
   * List of JavaScript DOM values used for tests
   *
   * @memberOf Modernizr
   * @name Modernizr._domPrefixes
   * @optionName Modernizr._domPrefixes
   * @optionProp domPrefixes
   * @access public
   * @example
   *
   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather
   * than kebab-case properties, all properties are their Capitalized variant
   *
   * ```js
   * Modernizr._domPrefixes === [ "Moz", "O", "ms", "Webkit" ];
   * ```
   */
  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);
  ModernizrProto._domPrefixes = domPrefixes;
  module.exports = domPrefixes;


},{"./ModernizrProto.js":20,"./omPrefixes.js":42}],31:[function(require,module,exports){

  /**
   * domToCSS takes a camelCase string and converts it to kebab-case
   * e.g. boxSizing -> box-sizing
   *
   * @access private
   * @function domToCSS
   * @param {string} name - String name of camelCase prop we want to convert
   * @returns {string} The kebab-case version of the supplied name
   */
  function domToCSS(name) {
    return name.replace(/([A-Z])/g, function(str, m1) {
      return '-' + m1.toLowerCase();
    }).replace(/^ms-/, '-ms-');
  }

  module.exports = domToCSS;


},{}],32:[function(require,module,exports){

  /**
   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.
   *
   * @access private
   * @function fnBind
   * @param {Function} fn - a function you want to change `this` reference to
   * @param {Object} that - the `this` you want to call the function with
   * @returns {Function} The wrapped version of the supplied function
   */
  function fnBind(fn, that) {
    return function() {
      return fn.apply(that, arguments);
    };
  }

  module.exports = fnBind;


},{}],33:[function(require,module,exports){
var createElement = require('./createElement.js');
var isSVG = require('./isSVG.js');
  /**
   * getBody returns the body of a document, or an element that can stand in for
   * the body if a real body does not exist
   *
   * @access private
   * @function getBody
   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an
   * artificially created element that stands in for the body
   */
  function getBody() {
    // After page load injecting a fake body doesn't work so check if body exists
    var body = document.body;

    if (!body) {
      // Can't use the real body create a fake one.
      body = createElement(isSVG ? 'svg' : 'body');
      body.fake = true;
    }

    return body;
  }

  module.exports = getBody;


},{"./createElement.js":26,"./isSVG.js":38}],34:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var createElement = require('./createElement.js');
var docElement = require('./docElement.js');
  /**
   * Modernizr.hasEvent() detects support for a given event
   *
   * @memberOf Modernizr
   * @name Modernizr.hasEvent
   * @optionName Modernizr.hasEvent()
   * @optionProp hasEvent
   * @access public
   * @function hasEvent
   * @param {string|*} eventName - the name of an event to test for (e.g. "resize")
   * @param {Element|string} [element=HTMLDivElement] - is the element|document|window|tagName to test on
   * @returns {boolean}
   * @example
   *  `Modernizr.hasEvent` lets you determine if the browser supports a supplied event.
   *  By default, it does this detection on a div element
   *
   * ```js
   *  hasEvent('blur') // true;
   * ```
   *
   * However, you are able to give an object as a second argument to hasEvent to
   * detect an event on something other than a div.
   *
   * ```js
   *  hasEvent('devicelight', window) // true;
   * ```
   */
  var hasEvent = (function() {

    // Detect whether event support can be detected via `in`. Test on a DOM element
    // using the "blur" event b/c it should always exist. bit.ly/event-detection
    var needsFallback = !('onblur' in docElement);

    function inner(eventName, element) {

      var isSupported;
      if (!eventName) { return false; }
      if (!element || typeof element === 'string') {
        element = createElement(element || 'div');
      }

      // Testing via the `in` operator is sufficient for modern browsers and IE.
      // When using `setAttribute`, IE skips "unload", WebKit skips "unload" and
      // "resize", whereas `in` "catches" those.
      eventName = 'on' + eventName;
      isSupported = eventName in element;

      // Fallback technique for old Firefox - bit.ly/event-detection
      if (!isSupported && needsFallback) {
        if (!element.setAttribute) {
          // Switch to generic element if it lacks `setAttribute`.
          // It could be the `document`, `window`, or something else.
          element = createElement('div');
        }

        element.setAttribute(eventName, '');
        isSupported = typeof element[eventName] === 'function';

        if (element[eventName] !== undefined) {
          // If property was created, "remove it" by setting value to `undefined`.
          element[eventName] = undefined;
        }
        element.removeAttribute(eventName);
      }

      return isSupported;
    }
    return inner;
  })();

  ModernizrProto.hasEvent = hasEvent;
  module.exports = hasEvent;


},{"./ModernizrProto.js":20,"./createElement.js":26,"./docElement.js":29}],35:[function(require,module,exports){
var is = require('./is.js');
  /**
   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support
   *
   * @author kangax
   * @access private
   * @function hasOwnProp
   * @param {object} object - The object to check for a property
   * @param {string} property - The property to check for
   * @returns {boolean}
   */

  // hasOwnProperty shim by kangax needed for Safari 2.0 support
  var hasOwnProp;

  (function() {
    var _hasOwnProperty = ({}).hasOwnProperty;
    /* istanbul ignore else */
    /* we have no way of testing IE 5.5 or safari 2,
     * so just assume the else gets hit */
    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
      hasOwnProp = function(object, property) {
        return _hasOwnProperty.call(object, property);
      };
    }
    else {
      hasOwnProp = function(object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */
        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));
      };
    }
  })();

  module.exports = hasOwnProp;


},{"./is.js":37}],36:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var docElement = require('./docElement.js');
var createElement = require('./createElement.js');
var getBody = require('./getBody.js');
  /**
   * injectElementWithStyles injects an element with style element and some CSS rules
   *
   * @access private
   * @function injectElementWithStyles
   * @param {string} rule - String representing a css rule
   * @param {Function} callback - A function that is used to test the injected element
   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected
   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes
   * @returns {boolean} the result of the specified callback test
   */
  function injectElementWithStyles(rule, callback, nodes, testnames) {
    var mod = 'modernizr';
    var style;
    var ret;
    var node;
    var docOverflow;
    var div = createElement('div');
    var body = getBody();

    if (parseInt(nodes, 10)) {
      // In order not to give false positives we create a node for each test
      // This also allows the method to scale for unspecified uses
      while (nodes--) {
        node = createElement('div');
        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
        div.appendChild(node);
      }
    }

    style = createElement('style');
    style.type = 'text/css';
    style.id = 's' + mod;

    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
    (!body.fake ? div : body).appendChild(style);
    body.appendChild(div);

    if (style.styleSheet) {
      style.styleSheet.cssText = rule;
    } else {
      style.appendChild(document.createTextNode(rule));
    }
    div.id = mod;

    if (body.fake) {
      //avoid crashing IE8, if background image is used
      body.style.background = '';
      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
      body.style.overflow = 'hidden';
      docOverflow = docElement.style.overflow;
      docElement.style.overflow = 'hidden';
      docElement.appendChild(body);
    }

    ret = callback(div, rule);
    // If this is done after page load we don't want to remove the body so check if body exists
    if (body.fake) {
      body.parentNode.removeChild(body);
      docElement.style.overflow = docOverflow;
      // Trigger layout so kinetic scrolling isn't disabled in iOS6+
      // eslint-disable-next-line
      docElement.offsetHeight;
    } else {
      div.parentNode.removeChild(div);
    }

    return !!ret;
  }

  module.exports = injectElementWithStyles;


},{"./ModernizrProto.js":20,"./createElement.js":26,"./docElement.js":29,"./getBody.js":33}],37:[function(require,module,exports){

  /**
   * is returns a boolean if the typeof an obj is exactly type.
   *
   * @access private
   * @function is
   * @param {*} obj - A thing we want to check the type of
   * @param {string} type - A string to compare the typeof against
   * @returns {boolean} true if the typeof the first parameter is exactly the specified type, false otherwise
   */
  function is(obj, type) {
    return typeof obj === type;
  }

  module.exports = is;


},{}],38:[function(require,module,exports){
var docElement = require('./docElement.js');
  /**
   * A convenience helper to check if the document we are running in is an SVG document
   *
   * @access private
   * @returns {boolean}
   */
  var isSVG = docElement.nodeName.toLowerCase() === 'svg';

  module.exports = isSVG;


},{"./docElement.js":29}],39:[function(require,module,exports){
var Modernizr = require('./Modernizr.js');
var modElem = require('./modElem.js');
  var mStyle = {
    style: modElem.elem.style
  };

  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to
  // the front of the queue.
  Modernizr._q.unshift(function() {
    delete mStyle.style;
  });

  module.exports = mStyle;


},{"./Modernizr.js":19,"./modElem.js":40}],40:[function(require,module,exports){
var Modernizr = require('./Modernizr.js');
var createElement = require('./createElement.js');
  /**
   * Create our "modernizr" element that we do most feature tests on.
   *
   * @access private
   */
  var modElem = {
    elem: createElement('modernizr')
  };

  // Clean up this element
  Modernizr._q.push(function() {
    delete modElem.elem;
  });

  module.exports = modElem;


},{"./Modernizr.js":19,"./createElement.js":26}],41:[function(require,module,exports){
var injectElementWithStyles = require('./injectElementWithStyles.js');
var domToCSS = require('./domToCSS.js');
var computedStyle = require('./computedStyle.js');
  /**
   * nativeTestProps allows for us to use native feature detection functionality if available.
   * some prefixed form, or false, in the case of an unsupported rule
   *
   * @access private
   * @function nativeTestProps
   * @param {array} props - An array of property names
   * @param {string} value - A string representing the value we want to check via @supports
   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise
   */
  // Accepts a list of property names and a single value
  // Returns `undefined` if native detection not available
  function nativeTestProps(props, value) {
    var i = props.length;
    // Start with the JS API: https://www.w3.org/TR/css3-conditional/#the-css-interface
    if ('CSS' in window && 'supports' in window.CSS) {
      // Try every prefixed variant of the property
      while (i--) {
        if (window.CSS.supports(domToCSS(props[i]), value)) {
          return true;
        }
      }
      return false;
    }
    // Otherwise fall back to at-rule (for Opera 12.x)
    else if ('CSSSupportsRule' in window) {
      // Build a condition string for every prefixed variant
      var conditionText = [];
      while (i--) {
        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');
      }
      conditionText = conditionText.join(' or ');
      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {
        return computedStyle(node, null, 'position') === 'absolute';
      });
    }
    return undefined;
  }
  module.exports = nativeTestProps;


},{"./computedStyle.js":24,"./domToCSS.js":31,"./injectElementWithStyles.js":36}],42:[function(require,module,exports){

  /**
   * If the browsers follow the spec, then they would expose vendor-specific styles as:
   *   elem.style.WebkitBorderRadius
   * instead of something like the following (which is technically incorrect):
   *   elem.style.webkitBorderRadius

   * WebKit ghosts their properties in lowercase but Opera & Moz do not.
   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
   *   erik.eae.net/archives/2008/03/10/21.48.10/

   * More here: github.com/Modernizr/Modernizr/issues/issue/21
   *
   * @access private
   * @returns {string} The string representing the vendor-specific style properties
   */
  var omPrefixes = 'Moz O ms Webkit';
  module.exports = omPrefixes;


},{}],43:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var testPropsAll = require('./testPropsAll.js');
var cssToDOM = require('./cssToDOM.js');
var atRule = require('./atRule.js');
  /**
   * prefixed returns the prefixed or nonprefixed property name variant of your input
   *
   * @memberOf Modernizr
   * @name Modernizr.prefixed
   * @optionName Modernizr.prefixed()
   * @optionProp prefixed
   * @access public
   * @function prefixed
   * @param {string} prop - String name of the property to test for
   * @param {Object} [obj] - An object to test for the prefixed properties on
   * @param {HTMLElement} [elem] - An element used to test specific properties against
   * @returns {string|false} The string representing the (possibly prefixed) valid
   * version of the property, or `false` when it is unsupported.
   * @example
   *
   * Modernizr.prefixed takes a string css value in the DOM style camelCase (as
   * opposed to the css style kebab-case) form and returns the (possibly prefixed)
   * version of that property that the browser actually supports.
   *
   * For example, in older Firefox...
   * ```js
   * prefixed('boxSizing')
   * ```
   * returns 'MozBoxSizing'
   *
   * In newer Firefox, as well as any other browser that support the unprefixed
   * version would simply return `boxSizing`. Any browser that does not support
   * the property at all, it will return `false`.
   *
   * By default, prefixed is checked against a DOM element. If you want to check
   * for a property on another object, just pass it as a second argument
   *
   * ```js
   * var rAF = prefixed('requestAnimationFrame', window);
   *
   * raf(function() {
   *  renderFunction();
   * })
   * ```
   *
   * Note that this will return _the actual function_ - not the name of the function.
   * If you need the actual name of the property, pass in `false` as a third argument
   *
   * ```js
   * var rAFProp = prefixed('requestAnimationFrame', window, false);
   *
   * rafProp === 'WebkitRequestAnimationFrame' // in older webkit
   * ```
   *
   * One common use case for prefixed is if you're trying to determine which transition
   * end event to bind to, you might do something like...
   * ```js
   * var transEndEventNames = {
   *     'WebkitTransition' : 'webkitTransitionEnd', * Saf 6, Android Browser
   *     'MozTransition'    : 'transitionend',       * only for FF < 15
   *     'transition'       : 'transitionend'        * IE10, Opera, Chrome, FF 15+, Saf 7+
   * };
   *
   * var transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];
   * ```
   *
   * If you want a similar lookup, but in kebab-case, you can use [prefixedCSS](#modernizr-prefixedcss).
   */
  var prefixed = ModernizrProto.prefixed = function(prop, obj, elem) {
    if (prop.indexOf('@') === 0) {
      return atRule(prop);
    }

    if (prop.indexOf('-') !== -1) {
      // Convert kebab-case to camelCase
      prop = cssToDOM(prop);
    }
    if (!obj) {
      return testPropsAll(prop, 'pfx');
    } else {
      // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'
      return testPropsAll(prop, obj, elem);
    }
  };

  module.exports = prefixed;


},{"./ModernizrProto.js":20,"./atRule.js":22,"./cssToDOM.js":27,"./testPropsAll.js":47}],44:[function(require,module,exports){
var Modernizr = require('./Modernizr.js');
var docElement = require('./docElement.js');
var isSVG = require('./isSVG.js');
  /**
   * setClasses takes an array of class names and adds them to the root element
   *
   * @access private
   * @function setClasses
   * @param {string[]} classes - Array of class names
   */
  // Pass in an and array of class names, e.g.:
  //  ['no-webp', 'borderradius', ...]
  function setClasses(classes) {
    var className = docElement.className;
    var classPrefix = Modernizr._config.classPrefix || '';

    if (isSVG) {
      className = className.baseVal;
    }

    // Change `no-js` to `js` (independently of the `enableClasses` option)
    // Handle classPrefix on this too
    if (Modernizr._config.enableJSClass) {
      var reJS = new RegExp('(^|\\s)' + classPrefix + 'no-js(\\s|$)');
      className = className.replace(reJS, '$1' + classPrefix + 'js$2');
    }

    if (Modernizr._config.enableClasses) {
      // Add the new classes
      if (classes.length > 0) {
        className += ' ' + classPrefix + classes.join(' ' + classPrefix);
      }
      if (isSVG) {
        docElement.className.baseVal = className;
      } else {
        docElement.className = className;
      }
    }
  }

  module.exports = setClasses;


},{"./Modernizr.js":19,"./docElement.js":29,"./isSVG.js":38}],45:[function(require,module,exports){
var is = require('./is.js');
var fnBind = require('./fnBind.js');
  /**
   * testDOMProps is a generic DOM property test; if a browser supports
   *   a certain property, it won't return undefined for it.
   *
   * @access private
   * @function testDOMProps
   * @param {Array<string>} props - An array of properties to test for
   * @param {Object} obj - An object or Element you want to use to test the parameters again
   * @param {boolean|Object} elem - An Element to bind the property lookup again. Use `false` to prevent the check
   * @returns {false|*} returns false if the prop is unsupported, otherwise the value that is supported
   */
  function testDOMProps(props, obj, elem) {
    var item;

    for (var i in props) {
      if (props[i] in obj) {

        // return the property name as a string
        if (elem === false) {
          return props[i];
        }

        item = obj[props[i]];

        // let's bind a function
        if (is(item, 'function')) {
          // bind to obj unless overridden
          return fnBind(item, elem || obj);
        }

        // return the unbound function or obj or value
        return item;
      }
    }
    return false;
  }

  module.exports = testDOMProps;


},{"./fnBind.js":32,"./is.js":37}],46:[function(require,module,exports){
var contains = require('./contains.js');
var mStyle = require('./mStyle.js');
var createElement = require('./createElement.js');
var nativeTestProps = require('./nativeTestProps.js');
var is = require('./is.js');
var cssToDOM = require('./cssToDOM.js');
  // testProps is a generic CSS / DOM property test.

  // In testing support for a given CSS property, it's legit to test:
  //    `elem.style[styleName] !== undefined`
  // If the property is supported it will return an empty string,
  // if unsupported it will return undefined.

  // We'll take advantage of this quick test and skip setting a style
  // on our modernizr element, but instead just testing undefined vs
  // empty string.

  // Property names can be provided in either camelCase or kebab-case.

  function testProps(props, prefixed, value, skipValueTest) {
    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;

    // Try native detect first
    if (!is(value, 'undefined')) {
      var result = nativeTestProps(props, value);
      if (!is(result, 'undefined')) {
        return result;
      }
    }

    // Otherwise do it properly
    var afterInit, i, propsLength, prop, before;

    // If we don't have a style element, that means we're running async or after
    // the core tests, so we'll need to create our own elements to use

    // inside of an SVG element, in certain browsers, the `style` element is only
    // defined for valid tags. Therefore, if `modernizr` does not have one, we
    // fall back to a less used element and hope for the best.
    // for strict XHTML browsers the hardly used samp element is used
    var elems = ['modernizr', 'tspan', 'samp'];
    while (!mStyle.style && elems.length) {
      afterInit = true;
      mStyle.modElem = createElement(elems.shift());
      mStyle.style = mStyle.modElem.style;
    }

    // Delete the objects if we created them.
    function cleanElems() {
      if (afterInit) {
        delete mStyle.style;
        delete mStyle.modElem;
      }
    }

    propsLength = props.length;
    for (i = 0; i < propsLength; i++) {
      prop = props[i];
      before = mStyle.style[prop];

      if (contains(prop, '-')) {
        prop = cssToDOM(prop);
      }

      if (mStyle.style[prop] !== undefined) {

        // If value to test has been passed in, do a set-and-check test.
        // 0 (integer) is a valid property value, so check that `value` isn't
        // undefined, rather than just checking it's truthy.
        if (!skipValueTest && !is(value, 'undefined')) {

          // Needs a try catch block because of old IE. This is slow, but will
          // be avoided in most cases because `skipValueTest` will be used.
          try {
            mStyle.style[prop] = value;
          } catch (e) {}

          // If the property value has changed, we assume the value used is
          // supported. If `value` is empty string, it'll fail here (because
          // it hasn't changed), which matches how browsers have implemented
          // CSS.supports()
          if (mStyle.style[prop] !== before) {
            cleanElems();
            return prefixed === 'pfx' ? prop : true;
          }
        }
        // Otherwise just return true, or the property name if this is a
        // `prefixed()` call
        else {
          cleanElems();
          return prefixed === 'pfx' ? prop : true;
        }
      }
    }
    cleanElems();
    return false;
  }

  module.exports = testProps;


},{"./contains.js":25,"./createElement.js":26,"./cssToDOM.js":27,"./is.js":37,"./mStyle.js":39,"./nativeTestProps.js":41}],47:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
var cssomPrefixes = require('./cssomPrefixes.js');
var is = require('./is.js');
var testProps = require('./testProps.js');
var domPrefixes = require('./domPrefixes.js');
var testDOMProps = require('./testDOMProps.js');
  /**
   * testPropsAll tests a list of DOM properties we want to check against.
   * We specify literally ALL possible (known and/or likely) properties on
   * the element including the non-vendor prefixed one, for forward-
   * compatibility.
   *
   * @access private
   * @function testPropsAll
   * @param {string} prop - A string of the property to test for
   * @param {string|Object} [prefixed] - An object to check the prefixed properties on. Use a string to skip
   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against
   * @param {string} [value] - A string of a css value
   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set
   * @returns {false|string} returns the string version of the property, or false if it is unsupported
   */
  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {

    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

    // did they call .prefixed('boxSizing') or are we just testing a prop?
    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {
      return testProps(props, prefixed, value, skipValueTest);

      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
    } else {
      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
      return testDOMProps(props, prefixed, elem);
    }
  }

  // Modernizr.testAllProps() investigates whether a given style property,
  // or any of its vendor-prefixed variants, is recognized
  //
  // Note that the property names must be provided in the camelCase variant.
  // Modernizr.testAllProps('boxSizing')
  ModernizrProto.testAllProps = testPropsAll;

  module.exports = testPropsAll;


},{"./ModernizrProto.js":20,"./cssomPrefixes.js":28,"./domPrefixes.js":30,"./is.js":37,"./testDOMProps.js":45,"./testProps.js":46}],48:[function(require,module,exports){
var tests = require('./tests.js');
var Modernizr = require('./Modernizr.js');
var classes = require('./classes.js');
var is = require('./is.js');
  /**
   * Run through all tests and detect their support in the current UA.
   *
   * @access private
   * @returns {void}
   */
  function testRunner() {
    var featureNames;
    var feature;
    var aliasIdx;
    var result;
    var nameIdx;
    var featureName;
    var featureNameSplit;

    for (var featureIdx in tests) {
      if (tests.hasOwnProperty(featureIdx)) {
        featureNames = [];
        feature = tests[featureIdx];
        // run the test, throw the return value into the Modernizr,
        // then based on that boolean, define an appropriate className
        // and push it into an array of classes we'll join later.
        //
        // If there is no name, it's an 'async' test that is run,
        // but not directly added to the object. That should
        // be done with a post-run addTest call.
        if (feature.name) {
          featureNames.push(feature.name.toLowerCase());

          if (feature.options && feature.options.aliases && feature.options.aliases.length) {
            // Add all the aliases into the names list
            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
            }
          }
        }

        // Run the test, or use the raw value if it's not a function
        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;

        // Set each of the names on the Modernizr object
        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
          featureName = featureNames[nameIdx];
          // Support dot properties as sub tests. We don't do checking to make sure
          // that the implied parent tests have been added. You must call them in
          // order (either in the test, or make the parent test a dependency).
          //
          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
          // hashtag famous last words
          featureNameSplit = featureName.split('.');

          if (featureNameSplit.length === 1) {
            Modernizr[featureNameSplit[0]] = result;
          } else {
            // cast to a Boolean, if not one already
            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
            }

            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
          }

          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
        }
      }
    }
  }
  module.exports = testRunner;


},{"./Modernizr.js":19,"./classes.js":23,"./is.js":37,"./tests.js":49}],49:[function(require,module,exports){

  var tests = [];
  module.exports = tests;


},{}],50:[function(require,module,exports){
/*!
{
  "name": "Ambient Light Events",
  "property": "ambientlight",
  "notes": [{
    "name": "W3C Spec",
    "href": "https://www.w3.org/TR/ambient-light/"
  }]
}
!*/
/* DOC
Detects support for the API that provides information about the ambient light levels, as detected by the device's light detector, in terms of lux units.
*/
var Modernizr = require('./../lib/Modernizr.js');
var hasEvent = require('./../lib/hasEvent.js');
  Modernizr.addTest('ambientlight', hasEvent('devicelight', window));


},{"./../lib/Modernizr.js":19,"./../lib/hasEvent.js":34}],51:[function(require,module,exports){
/*!
{
  "name": "Battery API",
  "property": "batteryapi",
  "aliases": ["battery-api"],
  "builderAliases": ["battery_api"],
  "tags": ["device", "media"],
  "authors": ["Paul Sayre", "Alex Bradley (@abrad1212)"],
  "notes": [{
    "name": "MDN Docs",
    "href": "https://developer.mozilla.org/en/DOM/window.navigator.mozBattery"
  }]
}
!*/
/* DOC
Detect support for the Battery API, for accessing information about the system's battery charge level.
*/
var Modernizr = require('./../lib/Modernizr.js');
var prefixed = require('./../lib/prefixed.js');
  Modernizr.addTest('batteryapi', !!prefixed('battery', navigator) || !!prefixed('getBattery', navigator), {aliases: ['battery-api']});


},{"./../lib/Modernizr.js":19,"./../lib/prefixed.js":43}],52:[function(require,module,exports){
/*!
{
  "name": "Notification",
  "property": "notification",
  "caniuse": "notifications",
  "authors": ["Theodoor van Donge", "Hendrik Beskow"],
  "notes": [{
    "name": "HTML5 Rocks Tutorial",
    "href": "https://www.html5rocks.com/en/tutorials/notifications/quick/"
  },{
    "name": "W3C Spec",
    "href": "https://www.w3.org/TR/notifications/"
  }, {
    "name": "Changes in Chrome to Notifications API due to Service Worker Push Notifications",
    "href": "https://developers.google.com/web/updates/2015/05/Notifying-you-of-notificiation-changes"
  }],
  "knownBugs": ["Possibility of false-positive on Chrome for Android if permissions we're granted for a website prior to Chrome 44."],
  "polyfills": ["desktop-notify", "html5-notifications"]
}
!*/
/* DOC
Detects support for the Notifications API
*/
var Modernizr = require('./../lib/Modernizr.js');
  Modernizr.addTest('notification', function() {
    if (!window.Notification || !window.Notification.requestPermission) {
      return false;
    }
    // if permission is already granted, assume support
    if (window.Notification.permission === 'granted') {
      return true;
    }

    try {
      new window.Notification('');
    } catch (e) {
      if (e.name === 'TypeError') {
        return false;
      }
    }

    return true;
  });


},{"./../lib/Modernizr.js":19}],53:[function(require,module,exports){
/*!
{
  "name": "Proximity API",
  "property": "proximity",
  "authors": ["Cătălin Mariș"],
  "tags": ["events", "proximity"],
  "caniuse": "proximity",
  "notes": [{
    "name": "MDN Docs",
    "href": "https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events"
  },{
    "name": "W3C Spec",
    "href": "https://www.w3.org/TR/proximity/"
  }]
}
!*/
/* DOC
Detects support for an API that allows users to get proximity related information from the device's proximity sensor.
*/
var Modernizr = require('./../lib/Modernizr.js');
var addTest = require('./../lib/addTest.js');

  Modernizr.addAsyncTest(function() {

    var timeout;
    var timeoutTime = 300;

    function advertiseSupport() {

      // Clean up after ourselves
      clearTimeout(timeout);
      window.removeEventListener('deviceproximity', advertiseSupport);

      // Advertise support as the browser supports
      // the API and the device has a proximity sensor
      addTest('proximity', true);

    }

    // Check if the browser has support for the API
    if ('ondeviceproximity' in window && 'onuserproximity' in window) {

      // Check if the device has a proximity sensor
      // ( devices without such a sensor support the events but
      //   will never fire them resulting in a false positive )
      window.addEventListener('deviceproximity', advertiseSupport);

      // If the event doesn't fire in a reasonable amount of time,
      // it means that the device doesn't have a proximity sensor,
      // thus, we can advertise the "lack" of support
      timeout = setTimeout(function() {
        window.removeEventListener('deviceproximity', advertiseSupport);
        addTest('proximity', false);
      }, timeoutTime);

    } else {
      addTest('proximity', false);
    }

  });



},{"./../lib/Modernizr.js":19,"./../lib/addTest.js":21}],54:[function(require,module,exports){
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
  'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}

/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}

/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;

    if (!obj) {
        return;
    }

    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}

/**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */
function deprecate(method, name, message) {
    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
    return function() {
        var e = new Error('get-stack-trace');
        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

        var log = window.console && (window.console.warn || window.console.log);
        if (log) {
            log.call(window.console, deprecationMessage, stack);
        }
        return method.apply(this, arguments);
    };
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */
var assign;
if (typeof Object.assign !== 'function') {
    assign = function assign(target) {
        if (target === undefined || target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var output = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                    if (source.hasOwnProperty(nextKey)) {
                        output[nextKey] = source[nextKey];
                    }
                }
            }
        }
        return output;
    };
} else {
    assign = Object.assign;
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */
var extend = deprecate(function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
        if (!merge || (merge && dest[keys[i]] === undefined)) {
            dest[keys[i]] = src[keys[i]];
        }
        i++;
    }
    return dest;
}, 'extend', 'Use `assign`.');

/**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */
var merge = deprecate(function merge(dest, src) {
    return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;

    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
        assign(childP, properties);
    }
}

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}

/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}

/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return (val1 === undefined) ? val2 : val1;
}

/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.addEventListener(type, handler, false);
    });
}

/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.removeEventListener(type, handler, false);
    });
}

/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}

/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}

/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}

/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}

/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}

/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }

    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
    }

    return results;
}

/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);

    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = (prefix) ? prefix + camelProp : property;

        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}

/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}

/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;

    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };

    this.init();

}

Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function() { },

    /**
     * bind the events
     */
    init: function() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },

    /**
     * unbind the events
     */
    destroy: function() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};

/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;

    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new (Type)(manager, inputHandler);
}

/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
        manager.session = {};
    }

    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;

    // compute scale, rotation etc
    computeInputData(manager, input);

    // emit secret event
    manager.emit('hammer.input', input);

    manager.recognize(input);
    manager.session.prevInput = input;
}

/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;

    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }

    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }

    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;

    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);

    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

    computeIntervalInputData(session, input);

    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}

function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };

        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}

/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity, velocityX, velocityY, direction;

    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;

        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);

        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}

/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }

    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}

/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;

    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }

    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }

    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}

/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}

/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];

    return Math.sqrt((x * x) + (y * y));
}

/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}

/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;

    this.pressed = false; // mousedown state

    Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];

        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }

        // mouse must be down
        if (!this.pressed) {
            return;
        }

        if (eventType & INPUT_END) {
            this.pressed = false;
        }

        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});

var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};

// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
if (window.MSPointerEvent && !window.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;

    Input.apply(this, arguments);

    this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;

        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }

        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }

        // update the event in the store
        store[storeIndex] = ev;

        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });

        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});

var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;

    Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }

        if (!this.started) {
            return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type);

        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
}

var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};

    Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;

    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }

    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;

    // get target touches from touches
    targetTouches = allTouches.filter(function(touch) {
        return hasParent(touch.target, target);
    });

    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }

    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }

        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }

    if (!changedTargetTouches.length) {
        return;
    }

    return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
        changedTargetTouches
    ];
}

/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */

var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
    Input.apply(this, arguments);

    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);

    this.primaryTouch = null;
    this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
        }

        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
        if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
        }

        this.callback(manager, inputEvent, inputData);
    },

    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});

function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
        this.primaryTouch = eventData.changedPointers[0].identifier;
        setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        setLastTouch.call(this, eventData);
    }
}

function setLastTouch(eventData) {
    var touch = eventData.changedPointers[0];

    if (touch.identifier === this.primaryTouch) {
        var lastTouch = {x: touch.clientX, y: touch.clientY};
        this.lastTouches.push(lastTouch);
        var lts = this.lastTouches;
        var removeLastTouch = function() {
            var i = lts.indexOf(lastTouch);
            if (i > -1) {
                lts.splice(i, 1);
            }
        };
        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
}

function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
    for (var i = 0; i < this.lastTouches.length; i++) {
        var t = this.lastTouches[i];
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
        }
    }
    return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}

TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }

        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },

    /**
     * just re-set the touchAction value
     */
    update: function() {
        this.set(this.manager.options.touchAction);
    },

    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function() {
        var actions = [];
        each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },

    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function(input) {
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;

        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }

        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

        if (hasNone) {
            //do not prevent defaults if this is a tap gesture

            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;

            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }

        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }

        if (hasNone ||
            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
            (hasPanX && direction & DIRECTION_VERTICAL)) {
            return this.preventSrc(srcEvent);
        }
    },

    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};

/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }

    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }

    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
        return false;
    }
    var touchMap = {};
    var cssSupports = window.CSS && window.CSS.supports;
    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

        // If css.supports is not supported but there is native touch-action assume it supports
        // all values. This is the case for IE 10 and 11.
        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
    });
    return touchMap;
}

/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = assign({}, this.defaults, options || {});

    this.id = uniqueId();

    this.manager = null;

    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);

    this.state = STATE_POSSIBLE;

    this.simultaneous = {};
    this.requireFail = [];
}

Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},

    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function(options) {
        assign(this.options, options);

        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },

    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },

    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },

    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },

    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },

    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function() {
        return this.requireFail.length > 0;
    },

    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },

    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function(input) {
        var self = this;
        var state = this.state;

        function emit(event) {
            self.manager.emit(event, input);
        }

        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }

        emit(self.options.event); // simple 'eventName' events

        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
        }

        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },

    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },

    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },

    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = assign({}, inputData);

        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }

        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone);

        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },

    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function(inputData) { }, // jshint ignore:line

    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function() { },

    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function() { }
};

/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}

/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}

/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}

/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },

    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },

    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function(input) {
        var state = this.state;
        var eventType = input.eventType;

        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);

        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});

/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);

    this.pX = null;
    this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },

    getTouchAction: function() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },

    directionTest: function(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;

        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },

    attrTest: function(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) &&
            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
    },

    emit: function(input) {

        this.pX = input.deltaX;
        this.pY = input.deltaY;

        var direction = directionStr(input.direction);

        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },

    emit: function(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);

    this._timer = null;
    this._input = null;
}

inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251, // minimal time of the pointer to be pressed
        threshold: 9 // a minimal movement is ok, but keep it low
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_AUTO];
    },

    process: function(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;

        this._input = input;

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }

        if (input && (input.eventType & INPUT_END)) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});

/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },

    getTouchAction: function() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },

    attrTest: function(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }

        return this._super.attrTest.call(this, input) &&
            direction & input.offsetDirection &&
            input.distance > this.options.threshold &&
            input.maxPointers == this.options.pointers &&
            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },

    emit: function(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
    }
});

/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);

    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;

    this._timer = null;
    this._input = null;
    this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300, // max time between the multi-tap taps
        time: 250, // max time of the pointer to be down (like finger on the screen)
        threshold: 9, // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_MANIPULATION];
    },

    process: function(input) {
        var options = this.options;

        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;

        this.reset();

        if ((input.eventType & INPUT_START) && (this.count === 0)) {
            return this.failTimeout();
        }

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }

            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }

            this._input = input;

            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },

    failTimeout: function() {
        this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
}

/**
 * @const {string}
 */
Hammer.VERSION = '2.0.7';

/**
 * default settings
 * @namespace
 */
Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, {enable: false}],
        [PinchRecognizer, {enable: false}, ['rotate']],
        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
        [TapRecognizer],
        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
        [PressRecognizer]
    ],

    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};

var STOP = 1;
var FORCED_STOP = 2;

/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = assign({}, Hammer.defaults, options || {});

    this.options.inputTarget = this.options.inputTarget || element;

    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};

    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);

    toggleCssProps(this, true);

    each(this.options.recognizers, function(item) {
        var recognizer = this.add(new (item[0])(item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}

Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function(options) {
        assign(this.options, options);

        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },

    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },

    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }

        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);

        var recognizer;
        var recognizers = this.recognizers;

        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;

        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
            curRecognizer = session.curRecognizer = null;
        }

        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];

            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }

            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },

    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }

        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },

    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }

        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;

        this.touchAction.update();
        return recognizer;
    },

    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }

        recognizer = this.get(recognizer);

        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);

            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }

        return this;
    },

    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function(events, handler) {
        if (events === undefined) {
            return;
        }
        if (handler === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },

    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function(events, handler) {
        if (events === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },

    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }

        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }

        data.type = event;
        data.preventDefault = function() {
            data.srcEvent.preventDefault();
        };

        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },

    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function() {
        this.element && toggleCssProps(this, false);

        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};

/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    var prop;
    each(manager.options.cssProps, function(value, name) {
        prop = prefixed(element.style, name);
        if (add) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
        } else {
            element.style[prop] = manager.oldCssProps[prop] || '';
        }
    });
    if (!add) {
        manager.oldCssProps = {};
    }
}

/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,

    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,

    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,

    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,

    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,

    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,

    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    assign: assign,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.
var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (typeof define === 'function' && define.amd) {
    define(function() {
        return Hammer;
    });
} else if (typeof module != 'undefined' && module.exports) {
    module.exports = Hammer;
} else {
    window[exportName] = Hammer;
}

})(window, document, 'Hammer');

},{}],"/conf/back":[function(require,module,exports){
/*
  @CONF   back
  @DESC   'behind' layer with hidden nav
  @AUTHOR faeb187
*/
module.exports = {
  id: 'back',
  name: 'div'
};

},{}],"/conf/cnt":[function(require,module,exports){
/*
  @CONF   cnt
  @AUTHOR faeb187
*/
module.exports = {
  id: 'cnt',
  name: 'div'
};

},{}],"/conf/copyright":[function(require,module,exports){
/*
  @CONF   copyright
  @AUTHOR faeb187
*/
module.exports = {
  id: 'cpy',
  name: 'small',
  text: 'copyright'
};

},{}],"/conf/footer":[function(require,module,exports){
/*
  @CONF   footer
  @AUTHOR faeb187
*/
module.exports = {
  id: 'f',
  name: 'footer'
};

},{}],"/conf/front":[function(require,module,exports){
/*
  @CONF   front
  @AUTHOR faeb187
*/
module.exports = {
  id: 'front',
  name: 'div'
};

},{}],"/conf/lang":[function(require,module,exports){
/*
  @CONF   lang
  @AUTHOR faeb187
*/
module.exports = {
  id: 'lang',
  name: 'lang'
};

},{}],"/conf/main":[function(require,module,exports){
/*
  @CONF   main
  @AUTHOR faeb187
*/
module.exports = {
  id: 'm',
  name: 'main'
};

},{}],"/conf/nav":[function(require,module,exports){
/*
  @CONF   nav
  @AUTHOR faeb187
*/
module.exports = {
  id: 'nav',
  name: 'nav',
  events: {
    click: [
      {
        ev: 'helper-site-load'
      }
    ]
  },
  items: [
    {
      id: 'aCare',
      lang: 'care',
      path: '/care'
    },
    {
      id: 'aPartner',
      lang: 'partner',
      path: '/partner',
      items: [
        {
          id: 'aProducts',
          lang: 'products',
          path: '/partner/products'
        },
        {
          id: 'aProductsAdditional',
          lang: 'productsAdditional',
          path: '/partner/productsAdditional'
        }
      ]
    },
    {
      id: 'aReports',
      lang: 'reports',
      path: '/reports'
    }
  ]
};

},{}],"/conf/slider":[function(require,module,exports){
/*
  @CONF   slider
  @AUTHOR faeb187
*/
module.exports = {
  id: 'slider-lft',
  name: 'slider',
  side: 'left'
};

},{}],"/helpers/dom":[function(require,module,exports){
/*
  DOLLARSIGNS
  @AUTHOR faeb187
*/
module.exports = (function() {
  var $$, d, dp;
  d = document;
  dp = new DOMParser();
  
  // @DESC   find element(s)
  // @PARAM  p1  MAN {string}      CSS selector
  // @PARAM  p2  OPT {string|Node} parent container
  // @RETURN {Node|array}  node or array of nodes or empty array

  // @DESC   create element
  // @PARAM  p1  MAN {string}  <tagName/> (e.g. $$ '<div/>')
  // @PARAM  p2  OPT {object}  attributes of new element
  // @RETURN {Node}
  $$ = function(p1, p2) {
    var $elm, $elms, k, ref, v;
    if (!p1 || typeof p1 !== 'string') {
      return this;
    }
    // CREATE element
    if (p1.slice(0, 1) === '<' && p1.slice(-2) === '/>') {
      $elm = d.createElement(p1.slice(1, -2));
      ref = p2 || {};
      for (k in ref) {
        v = ref[k];
        $elm.setAttribute(k, v);
      }
      return $elm;
    }
    // FIND element by id
    if (p1.slice(0, 1) === '#') {
      return d.getElementById(p1.slice(1));
    }
    // CHECK for parentNode
    if (p2 && typeof p2 === 'string') {
      
      // GET parent node by id
      if (p2.slice(0, 1) === '#') {
        p2 = d.getElementById(p2.slice(1));
      } else {
        
        // GET parent node by selector
        p2 = d.querySelector(p2);
      }
    }
    if (!p2) {
      p2 = d;
    }
    // FIND element(s) in parent
    $elms = p2.querySelectorAll(p1);
    if (!$elms.length) {
      return [];
    }
    // return found element(s)
    if ($elms.length === 1) {
      return $elms[0];
    } else {
      return $elms;
    }
  };
  // @DESC   parse HTML string to node tree
  // @PARAM  MAN {str}   HTML string to parse
  // @RETURN {node|$$}
  $$.parse = function(str) {
    if (!str || typeof str !== 'string') {
      return $$;
    }
    // return parsed node
    return dp.parse(str);
  };
  // @DESC   get/set css of element
  // @PARAM  elms    MAN {Node|string} element(s) or selector
  // @PARAM  obj     MAN {json|string} styles to set or property
  // @RETURN {string|$$}
  $$.css = function(elms, obj) {
    var i, j, k, ref, v;
    if (!elms || !obj) {
      return this;
    }
    // get node by selector
    if (typeof elms === 'string') {
      elms = $$(elms);
    }
    // set element style
    if (typeof obj === 'object') {
      if (!elms.length) {
        elms = [elms];
      }
      for (i = j = 0, ref = elms.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
        for (k in obj) {
          v = obj[k];
          elms[i].style[k] = v;
        }
      }
      return this;
    }
    // get computed style for element
    v = window.getComputedStyle(elms)[obj];
    
    // return parsed style
    if (v.slice(-2) === 'px' && v.indexOf(' ' === -1)) {
      return parseFloat(v);
    } else {
      return v;
    }
  };
  // @DESC   get all previous siblings
  // @PARAM  elm   MAN {node|string} element or selector
  // @RETURN {array|$$}
  $$.prevAll = function(elm) {
    
    // delegate to $$.nextAll
    return this.nextAll(elm, {
      prev: true
    });
  };
  
  // @DESC     get all next siblings
  // @PARAM    elm       MAN {node|string} element or selector
  // @PARAM    opt.prev  OPT {boolean}     $$.prevAll delegation
  // @RETURN  {array}
  $$.nextAll = function(elm, opt) {
    var dir, sib, sibs;
    opt = opt || {};
    if (!elm) {
      return;
    }
    // find element by selector
    if (typeof elm === 'string') {
      elm = $$(elm);
    }
    if (!elm) {
      return this;
    }
    // only one element
    // (default: first in NodeList)
    if (elm.length) {
      elm = elm[0];
    }
    // collect next siblings
    sibs = [];
    sib = elm;
    dir = opt.prev ? 'previous' : 'next';
    while (true) {
      sib = sib[dir + 'Sibling'];
      if (!sib) {
        break;
      }
      sibs.push(sib);
    }
    return sibs;
  };
  // @DESC   get parent node
  // @PARAM  $elm  MAN {node|string} element or selector
  // @PARAM  sel   OPT {string}      parent selector
  // @RETURN {node}
  $$.parent = function($elm, sel) {
    var selMatch;
    if (!$elm) {
      return this;
    }
    
    // just return direct parent node
    if (arguments.length === 1) {
      return $elm.parentNode;
    }
    // look for requested parent
    selMatch = function($elm, sel) {
      if ($elm.matches(sel)) {
        return $elm;
      } else {
        return selMatch($elm.parentNode, sel);
      }
    };
    return selMatch($elm.parentNode, sel);
  };
  
  // @DESC   checks for existence of a class on a node
  // @PARAM  $elm    MAN {node|string} element or selector
  // @PARAM  cn      MN  {string}      class to check
  // @RETURN {boolean||$$}
  $$.hasClass = function($elm, cn) {
    if (!$elm || !cn || typeof cn !== 'string') {
      return this;
    }
    if (typeof $elm === 'string') {
      $elm = $$($elm);
    }
    if (!$elm) {
      return this;
    }
    if ($elm.length) {
      $elm = $elm[0];
    }
    if ($elm.className.indexOf(cn) > -1) {
      return true;
    } else {
      return false;
    }
  };
  // @DESC   adds a class to node
  // @PARAM  $elm  MAN {node|string} element or selector
  // @PARAM  cn    MAN {string}      class to add
  // @RETURN {$$}
  $$.addClass = function($elm, cn) {
    if (!$elm || !cn || typeof cn !== 'string') {
      return this;
    }
    
    // GET node by selector
    if (typeof $elm === 'string') {
      $elm = $$($elm);
    }
    if (!$elm) {
      return this;
    }
    // MULTIPLE NODES matched
    if ($elm.length) {
      $elm = $elm[0];
    }
    
    // ALREADY attached class
    if ($elm.className.indexOf(cn) > -1) {
      return this;
    }
    
    // ADD class
    $elm.className += ' ' + cn;
    return this;
  };
  // @DESC   removes a class from node
  // @PARAM  $elm  MAN {node|string} element or selector
  // @PARAM  cn    MAN {string}      class to remove
  // @RETURN {$$}
  $$.removeClass = function($elm, cn) {
    var cns, idx;
    if (!$elm || !cn || typeof cn !== 'string') {
      return this;
    }
    
    // GET node by selector
    if (typeof $elm === 'string') {
      $elm = $$($elm);
    }
    if (!$elm) {
      return this;
    }
    
    // MATCHED multiple nodes
    if ($elm.length) {
      $elm = $elm[0];
    }
    if (!$elm.className) {
      return this;
    }
    
    // GET index of toRemove class
    cns = $elm.className.split(' ');
    idx = cns.indexOf(cn);
    
    // REMOVE class from node
    if (idx > -1) {
      cns.splice(idx, 1);
      $elm.className = cns.join(' ');
    }
    return this;
  };
  // @DESC   toggles a node class
  // @PARAM  elm       MAN {node|string} element or selector
  // @PARAM  toToggle  MAN {string}  class to toggle
  // @RETURN {$$}
  $$.toggleClass = function(elm, toToggle) {
    var cns, idx;
    if (!elm || !toToggle) {
      return this;
    }
    if (typeof elm === 'string') {
      elm = $$(elm);
    }
    if (!elm) {
      return $$;
    }
    if (elm.length) {
      elm = elm[0];
    }
    cns = elm.className.split(' ');
    idx = cns.indexOf(toToggle);
    if (idx === -1) {
      elm.className = cns.join(' ') + ' ' + toToggle;
    } else {
      cns.splice(idx, 1);
      elm.className = cns.join(' ');
    }
    return this;
  };
  // @DESC   toggles style.display
  // @PARAM  elm   MAN {node|string} element or selector
  // @PARAM  dsp   OPT {string}      visible type (@DEF:block|flex)
  // @RETURN {$$}
  $$.toggle = function(elm, dsp) {
    var curDsp;
    if (!elm) {
      return $$;
    }
    dsp = dsp || 'block';
    if (typeof elm === 'string') {
      elm = $$(elm);
    }
    if (!elm) {
      return $$;
    }
    if (elm.length) {
      elm = elm[0];
    }
    curDsp = elm.style.display;
    elm.style.display = curDsp === 'none' ? dsp : 'none';
    return $$;
  };
  // @DESC   uppercase first character of string
  // @PARAM  str   MAN {string}  string
  // @RETURN {string|$$}
  $$.ucFirst = function(str) {
    if (!str || typeof str !== 'string') {
      return $$;
    }
    
    // RETURN string
    return str.charAt(0).toUpperCase() + str.slice(1);
  };
  // @DESC   extend object with additional properties
  // @DESC   (o.x overwrites t.x if t.x exists)
  // @PARAM  t MAN {json}  target object
  // @PARAM  o MAN {json}  object to merge into target
  $$.extend = function(t, o) {
    var k;
    for (k in o) {
      t[k] = o[k];
    }
    return t;
  };
  // @DESC   get index of DOM node compared to siblings (0..n)
  // @PARAM  $elm  MAN {node|string} element or selector
  // @RETURN {integer} index or -1
  $$.index = function($elm) {
    var $p;
    if (!$elm) {
      return $$;
    }
    // FIND element by selector
    // ...return  when no match
    if (typeof $elm === 'string') {
      $elm = $$($elm);
    }
    if (!$elm) {
      return $$;
    }
    // ONLY ONE element
    // ...and get its parent node
    if ($elm.length) {
      $elm = $elm[0];
    }
    $p = $elm.parentNode;
    // RETURN index or -1
    return Array.prototype.indexOf.call($p.childNodes, $elm);
  };
  // @DESC   listen to an event
  // @PARAM  $elms MAN {Node|string} element(s) or selector
  // @PARAM  event MAN {string}      event name
  // @PARAM  cb    MAN {function}    callback function
  // @RETURN {$$}
  $$.listen = function($elms, event, cb) {
    var $elm, j, len;
    if (!$elms || !event || !cb) {
      return this;
    }
    // get node by selector
    if (typeof $elms === 'string') {
      $elms = $$($elms);
    }
    if (!$elms.length) {
      $elms = [$elms];
    }
// add event listeners
    for (j = 0, len = $elms.length; j < len; j++) {
      $elm = $elms[j];
      $elm.addEventListener(event, cb);
    }
    return this;
  };
  // @DESC   destroy event listener
  // @PARAM  $elms   MAN {Node|string} element(s) or selector
  // @PARAM  event   MAN {string}      event name
  // @PARAM  handler MAN {function}    attached handler
  // @RETURN {$$}
  $$.destroy = function($elms, event, handler) {
    var $elm, j, len;
    if (!$elms || !event || !handler) {
      return this;
    }
    // GET node by selector
    if (typeof $elms === 'string') {
      $elms = $$($elms);
    }
    if (!$elms.length) {
      $elms.removeEventListener(event, handler);
    } else {
// DESTROY event listeners
      for (j = 0, len = $elms.length; j < len; j++) {
        $elm = $elms[j];
        $elm.removeEventListener(event, handler);
      }
    }
    return this;
  };
  // @DESC   API create request
  // @PARAM  path  MAN {string}    request path
  // @PARAM  dta   OPT {object}    request data
  // @PARAM  cb    OPT {function}  callback
  // @RETURN {$$}
  $$.create = function(path, dta, cb) {
    if (!path) {
      return;
    }
    return this;
  };
  // @DESC   API read request
  // @PARAM  path  MAN {string}    request path
  // @PARAM  dta   OPT {object}    request data
  // @PARAM  cb    MAN {function}  callback
  // @RETURN {$$}
  $$.read = function(path, dta, cb) {
    var arg, xhr;
    arg = arguments;
    if (!arg[0]) {
      return this;
    }
    // NO DATA to send
    if (arg.length === 2) {
      // SECOND PARAM must be callback
      if (typeof arg[1] !== 'function') {
        return this;
      }
      // NO DATA but callback
      cb = arg[1];
      dta = null;
    }
    if (!cb || typeof cb !== 'function') {
      return this;
    }
    
    // create AJAX request
    xhr = new XMLHttpRequest();
    // response loaded (execute callback)
    xhr.onreadystatechange = function() {
      if (this.readyState === 4 && this.status === 200) {
        return cb(this.responseText);
      }
    };
    
    // send request
    xhr.open('GET', path);
    xhr.send(dta);
    return this;
  };
  // @DESC   API update request
  // @PARAM  path  MAN {string}    request path
  // @PARAM  dta   MAN {object}    request data
  // @PARAM  cb    OPT {function}  callback
  // @RETURN {$$}
  $$.update = function(path, dta, cb) {
    if (!path || !dta) {
      return this;
    }
    return this;
  };
  // @DESC   API delete request
  // @RETURN {$$}
  $$.delete = function(path, dta, cb) {
    if (!path || !dta || !cb) {
      return this;
    }
    return this;
  };
  // @DESC   preload media
  // @RETURN {$$}
  $$.preload = function(opt) {
    var cb, cbFile, img, itm, itms, j, len, loaded, supported, toLoad, type;
    opt = opt || {};
    itms = opt.items || [];
    cbFile = opt.onFileLoaded;
    cb = opt.onFinish;
    loaded = 0;
    toLoad = itms.length;
    supported = ['jpg', 'png'];
    if (!toLoad || !cb || typeof cb !== 'function') {
      return $$;
    }
    for (j = 0, len = itms.length; j < len; j++) {
      itm = itms[j];
      type = itm.split('.').pop();
      if (supported.indexOf(type) === -1) {
        return $$;
      }
      img = new Image();
      img.onload = function() {
        if (++loaded === toLoad) {
          return cb(toLoad);
        } else if (opt.onFileLoaded) {
          return opt.onFileLoaded(this.getAttribute('src'));
        }
      };
      img.src = itm;
    }
  };
  // SPA history handling
  $$.history = {
    // @DESC   update current state
    // @PARAM  site  MAN {string}  site path
    // @RETURN {$$}
    go: function(site) {
      return history.pushState({
        site: site
      }, site, '/' + site);
    }
  };
  // @EXPORT $$
  return $$;
})();

},{}],"/helpers/obs":[function(require,module,exports){
/*
  OBSERVER
  @DESC   observer pattern
  @AUTHOR faeb187
*/
module.exports = (function() {
  var evs;
  // @DEFINE   evs {json}  event registrations
  // @EXAMPLE  'name-of-event': [ cb1, cb2, cb3 ]
  // @PRIVATE
  evs = {};
  return {
    // @DESC   add event listener and attach a handler
    // @PARAM  ev  MAN {string}    event name
    // @PARAM  cb  MAN {function}  callback
    // @RETURN {@} chaining pattern
    // @PUBLIC
    l: function(ev, cb) {
      // MANDATORY event name & callback
      if (arguments.length !== 2 || typeof ev !== 'string' || typeof cb !== 'function') {
        return this;
      }
      if (!evs[ev]) {
        evs[ev] = [cb];
      } else {
        evs[ev].push(cb);
      }
      return this;
    },
    // @DESC   fire attached event handlers
    // @PARAM  ev    MAN {string}  event name
    // @PARAM  arg   OPT {*}       handler param
    // @RETURN {@}   chaining pattern
    // @PUBLIC
    f: function(ev, arg) {
      var cb, cbs, i, len;
      if (!ev || typeof ev !== 'string') {
        return this;
      }
      
      // NO HANDLERS attached to event
      cbs = evs[ev];
      if (!cbs || !cbs.length) {
        return this;
      }
      for (i = 0, len = cbs.length; i < len; i++) {
        cb = cbs[i];
        
        // FIRE event handlers
        cb(arg);
      }
      return this;
    },
    // @DESC   removes event listeners
    // @PARAM  ev    MAN {string}  event name
    // @RETURN {@}   chaining pattern
    // @PUBLIC
    r: function(ev) {
      if (!ev || typeof ev !== 'string') {
        return this;
      }
      
      // DELETE event registrations
      delete evs[ev];
      return this;
    }
  };
})();

},{}],"/helpers/site":[function(require,module,exports){
/*
  @-  HELPER site
  @-  AUTHOR faeb187
*/
module.exports = (function() {
  var $$, $b, Conf, Site, Ui, bps, d, load, loadNext, medias, obs, resize, startApp, state, vp;
  //^  local modules
  $$ = require('./dom');
  obs = require('./obs');
  state = require('./state');
  //>  d,$b
  d = document;
  $b = $$('body');
  medias = {};
  vp = {};
  bps = {
    xs: 400,
    s: 600,
    m: 800,
    l: 1050,
    xl: 1800
  };
  //> Site
  Site = {
    care: require('../sites/care'),
    partner: require('../sites/partner'),
    reports: require('../sites/reports')
  };
  //> Conf
  Conf = {
    back: require('../conf/back'),
    cnt: require('../conf/cnt'),
    copyright: require('../conf/copyright'),
    footer: require('../conf/footer'),
    front: require('../conf/front'),
    header: require('../conf/header'),
    lang: require('../conf/lang'),
    main: require('../conf/main'),
    nav: require('../conf/nav'),
    slider: require('../conf/slider'),
    careTodo: require('../conf/careTodo'),
    partnerTodo: require('../conf/partnerTodo'),
    reportsTodo: require('../conf/reportsTodo'),
    navToggle: require('../conf/navToggle')
  };
  //> Ui
  Ui = {
    html: require('../uis/html'),
    icon: require('../uis/icon'),
    lang: require('../uis/lang'),
    layout: require('../uis/layout'),
    list: require('../uis/list'),
    nav: require('../uis/nav'),
    slider: require('../uis/slider')
  };
  // resize
  resize = function() {
    var k, results, v;
    vp.x = window.innerWidth;
    vp.y = window.innerHeight;
    results = [];
    for (k in medias) {
      v = medias[k];
      if (medias[k].min && vp.x < medias[k].min || medias[k].max && vp.x > medias[k].max) {
        results.push($$('#' + k, $b).setAttribute('data-fx', 'out'));
      } else {
        results.push($$('#' + k, $b).setAttribute('data-fx', 'in'));
      }
    }
    return results;
  };
  //-   append app to browser
  //<!  $app {node}
  startApp = function($site) {
    var $ankh;
    if (!$site) {
      return;
    }
    //- show site in browser
    $$('.ui-progress').setAttribute('data-fx', 'out');
    $ankh = $$('#ankh', $b);
    $ankh.innerHTML = '';
    $ankh.appendChild($site);
    resize();
    
    //- load lang 'de'
    //! to fix! no direct UI access allowed
    return Ui['lang'].update({
      id: $$('.ui-lang').id,
      lang: state.get({
        id: $$('.ui-lang').id
      }) || 'de'
    });
  };
  //- loads site
  //<! name  {string} name of the site
  load = function(name) {
    var $df, i, ids, len, obj;
    //>!?
    obj = Site[name] || {};
    ids = obj.ids;
    if (!ids) {
      return;
    }
    // get viewport measures
    vp.x = window.innerWidth;
    vp.y = window.innerHeight;
    
    //>
    $df = d.createDocumentFragment();
    for (i = 0, len = ids.length; i < len; i++) {
      obj = ids[i];
      
      //..
      loadNext(obj, $df);
    }
    //- set site name in body
    $b.setAttribute('data-site', name);
    // listen to viewport resize
    $$.listen(window, 'resize', resize);
    return startApp($df);
  };
  //-  load UI
  //<! ui  {string}  UI id
  //<! $t  {node}    UI target node
  loadNext = function(obj, $t) {
    var $nt, conf, i, len, max, media, min, ref, results, ui;
    if (!obj || !$t) {
      return;
    }
    //>
    conf = JSON.parse(JSON.stringify(Conf[obj.id]));
    if (!conf) {
      return;
    }
    ui = Ui[conf.name] || Ui['html'];
    
    //..
    conf.target = $t;
    // check for matchin viewport min|max
    media = obj.media;
    if (media) {
      min = bps[media.min];
      max = bps[media.max];
      if (min !== void 0 || max !== void 0) {
        medias[conf.id] = {};
        if (min !== void 0) {
          medias[conf.id].min = min;
        }
        if (max !== void 0) {
          medias[conf.id].max = max;
        }
      }
    }
    $nt = ui.init(conf);
    if (obj.ids && $nt) {
      ref = obj.ids;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        obj = ref[i];
        results.push(loadNext(obj, $nt));
      }
      return results;
    }
  };
  // listen to events
  obs.l("helper-site-load", function(e) {
    var path;
    path = e.target.getAttribute("href").slice(1);
    load(path);
    return $$.history.go(path);
  });
  return {
    load: load
  };
})();

},{"../conf/back":"/conf/back","../conf/careTodo":2,"../conf/cnt":"/conf/cnt","../conf/copyright":"/conf/copyright","../conf/footer":"/conf/footer","../conf/front":"/conf/front","../conf/header":3,"../conf/lang":"/conf/lang","../conf/main":"/conf/main","../conf/nav":"/conf/nav","../conf/navToggle":4,"../conf/partnerTodo":5,"../conf/reportsTodo":6,"../conf/slider":"/conf/slider","../sites/care":8,"../sites/partner":9,"../sites/reports":10,"../uis/html":11,"../uis/icon":12,"../uis/lang":13,"../uis/layout":14,"../uis/list":15,"../uis/nav":16,"../uis/slider":17,"./dom":"/helpers/dom","./obs":"/helpers/obs","./state":"/helpers/state"}],"/helpers/stalker":[function(require,module,exports){
/*
  STALKER
  @AUTHOR faeb187
*/
module.exports = (function() {
  var d, getVisEvent, log, offLine, onLine, state, stateChange;
  // @DEFINE variables
  d = document;
  log = [];
  state = 'visibilityChange';
  // EVENT handler
  onLine = function() {
    return log.push(['online', +new Date()]);
  };
  offLine = function() {
    return log.push(['offline', +new Date()]);
  };
  stateChange = function() {
    return log.push([d[state], +new Date()]);
  };
  // @DESC get event name of page visibility API
  getVisEvent = function() {
    var hidden, visChange;
    if (typeof d.hidden !== 'undefined') {
      hidden = 'hidden';
      visChange = 'visibilitychange';
    } else if (typeof d.mozHidden !== 'undefined') {
      hidden = 'mozHidden';
      visChange = 'mozvisibilitychange';
      state = 'mozVisibilityState';
    } else if (typeof d.msHidden !== 'undefined') {
      hidden = 'msHidden';
      visChange = 'msvisibilitychange';
      state = 'msVisibilityState';
    } else if (typeof d.webkitHidden !== 'undefined') {
      hidden = 'webkitHidden';
      visChange = 'webkitvisibilitychange';
      state = 'webkitVisibilityState';
    }
    d.addEventListener(visChange, stateChange);
    return log.push([d[state], +new Date()]);
  };
  return {
    
    // @DESC   start stalking
    // @RETURN {void}
    // @PUBLIC
    init: function() {
      // ATTACH events
      window.addEventListener('online', onLine);
      window.addEventListener('offline', offLine);
      log.push([(navigator.onLine ? 'online' : 'offline'), +new Date()]);
    }
  };
})();

},{}],"/helpers/state":[function(require,module,exports){
/*
  STATE OF MINED
  @author faeb187
*/
module.exports = (function() {
  var ls, prefix, state;
  
  // PRIVATE

  // DEFINE variables
  state = {};
  prefix = location.host + '-';
  ls = {
    // @DESC   set/update item in localStorage
    // @PARAM  id    MAN {string}  id of UI
    // @PARAM  state MAN {object}  current state
    // @RETURN {void}
    set: function(id, state) {
      if (!id || !state) {
        return;
      }
      if (typeof state !== 'string') {
        state = JSON.stringify(state);
      }
      localStorage.setItem(prefix + id, state);
    },
    // @DESC   get item from localStorage
    // @PARAM  id  MAN {string}  id of UI
    // @RETURN {json|null}       current UI state or null
    get: function(id) {
      var s;
      if (!id) {
        return;
      }
      s = localStorage.getItem(prefix + id);
      if (s && s.slice(0, 1) === '{') {
        return JSON.parse(s);
      } else {
        return s;
      }
    },
    // @DESC   remove item from localStorage
    // @PARAM  id    MAN {string}  id of UI
    // @RETURN {void}
    rm: function(id) {
      if (!id) {
        return;
      }
      localStorage.removeItem(prefix + id);
    }
  };
  return {
    // @DESC   set/update UI state
    // @PARAM  opt.id    MAN {string}  id of UI
    // @PARAM  opt.state MAN {string}  current state
    // @RETURN {void}

    // PUBLIC

    set: function(opt) {
      var id;
      opt = opt || {};
      id = opt.id;
      state = opt.state;
      if (!id || !state) {
        return;
      }
      
      // SET state in localStorage
      return ls.set(id, state);
    },
    // @DESC   get current UI state
    // @PARAM  opt.id  MAN {string}  id of UI
    // @RETURN {json}  current UI state or {}
    get: function(opt) {
      var id;
      opt = opt || {};
      id = opt.id;
      if (!id) {
        return;
      }
      
      // GET state from localStorage
      return ls.get(id);
    },
    // @DESC   remove UI state
    // @PARAM  opt.id  MAN {string} id of UI
    // @RETURN {void}
    rm: function(opt) {
      var id;
      opt = opt || {};
      id = opt.id;
      if (!id) {
        return;
      }
      return ls.rm(id);
    }
  };
})();

},{}]},{},[1]);
