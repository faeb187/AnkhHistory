(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _browsernizr = require("browsernizr");

var _core = require("./core");

var _ankh = require("./apps/dbp/ankh");

var _uis = require("./uis");

// require "browsernizr/test/proximity"
// require "browsernizr/test/battery"
// require "browsernizr/test/ambientlight"
// require "browsernizr/test/notification"
document.title = _ankh.ankh.title;

_core.site.load(location.pathname);
},{"./apps/dbp/ankh":2,"./core":17,"./uis":35,"browsernizr":47}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ankh = void 0;
// ANKH config
var ankh = {
  currency: "chf",
  date: {
    month: "short",
    year: "numeric"
  },
  lang: "de",
  title: "BeKB",
  networkAdapter: "apollo"
};
exports.ankh = ankh;
},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routes = void 0;
var routes = [{
  id: "site-care",
  lang: "care",
  path: "/care",
  items: [{
    id: "site-careOverview",
    lang: "overview",
    path: "/care/overview"
  }]
}, {
  id: "site-partner",
  lang: "partner",
  path: "/partner",
  items: [{
    id: "site-partnerProducts",
    lang: "products",
    path: "/partner/products"
  }, {
    id: "site-partnerProductsAdditional",
    lang: "productsAdditional",
    path: "/partner/productsAdditional"
  }]
}, {
  id: "site-reports",
  lang: "reports",
  path: "/reports",
  items: [{
    id: "site-reportsOverview",
    lang: "overview",
    path: "/reports/overview"
  }]
}, {
  id: "site-process",
  lang: "process",
  path: "/process",
  items: [{
    id: "site-processOpenProduct",
    lang: "openProduct",
    path: "/process/openProduct",
    hidden: true
  }]
}];
exports.routes = routes;
},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cols = exports.data = void 0;

var _ankh = require("../../ankh");

var data = [{
  cardNumber: "10003354",
  cardProduct: "Maestro-Karte",
  iban: "CH45 43599 34532 23455 33",
  firstEmbossingLine: "Fabio Gartenmann",
  dailyLimit: 2500,
  monthlyLimit: 5000,
  expiration: +new Date(),
  state: "active"
}, {
  cardNumber: "10005554",
  cardProduct: "Maestro-Karte",
  iban: "CH22 4111 34112 22453 18",
  firstEmbossingLine: "Silvan Hollenstein",
  dailyLimit: 2500,
  monthlyLimit: 5000,
  expiration: +new Date(),
  state: "active"
}, {
  cardNumber: "10001377",
  cardProduct: "Maestro-Karte",
  iban: "CH45 11199 32535 13477 01",
  firstEmbossingLine: "Baard Olsen",
  dailyLimit: 5500,
  monthlyLimit: 10000,
  expiration: +new Date(),
  state: "active"
}];
exports.data = data;
var cols = [{
  svg: "mastercard",
  width: 32
}, {
  lang: "cardNumber"
}, {
  lang: "cardProduct"
}, {
  lang: "iban"
}, {
  lang: "firstEmbossingLine"
}, {
  lang: "dailyLimit",
  currency: _ankh.ankh.currency
}, {
  lang: "monthlyLimit",
  currency: _ankh.ankh.currency
}, {
  lang: "expiration",
  date: _ankh.ankh.date
}, {
  lang: "state"
}, {
  lang: "actions",
  svg: "dots",
  right: true
}];
exports.cols = cols;
},{"../../ankh":2}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.user = void 0;
var user = {
  name: "Reto Schönauer",
  username: "RSC05@bekb.ch"
};
exports.user = user;
},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dbp = void 0;

var _routes = require("../conf/routes");

var _user = require("../data/user");

var dbp = {
  ids: [{
    id: "back",
    ui: "html",
    ids: [{
      id: "slider-lft",
      ui: "slider",
      ids: [{
        id: "navMobile",
        ui: "list",
        items: _routes.routes,
        role: "navigation",
        events: {
          click: [{
            name: "_helper-site-load",
            target: "navMobile"
          }]
        },
        media: {
          max: "l"
        }
      }]
    }]
  }, {
    id: "front",
    ui: "html",
    ids: [{
      id: "cnt",
      ui: "html",
      ids: [{
        id: "h",
        ui: "html",
        tag: "header",
        ids: [{
          id: "hTop",
          ui: "html",
          ids: [{
            id: "logo",
            lang: "bekb",
            ui: "html",
            tag: "img",
            src: "/assets/img/logo.svg",
            alt: "logo"
          }, {
            id: "hTopRight",
            ui: "html",
            ids: [{
              id: "profile",
              ui: "html",
              tag: "section",
              media: {
                min: "l"
              },
              ids: [{
                id: "profileInner",
                ui: "html",
                ids: [{
                  id: "iconProfile",
                  ui: "icon",
                  icon: "person"
                }, {
                  id: "profileUserInfo",
                  ui: "html",
                  ids: [{
                    id: "profileName",
                    ui: "html",
                    tag: "span",
                    text: _user.user.name
                  }, {
                    id: "profileUsername",
                    ui: "html",
                    tag: "span",
                    text: _user.user.username
                  }]
                }]
              }]
            }, {
              id: "search",
              ui: "input",
              placeholder: "partnerSearch"
            }]
          }]
        }, {
          id: "nav",
          ui: "list",
          items: _routes.routes,
          role: "navigation",
          events: {
            click: [{
              name: "_helper-site-load",
              target: "nav"
            }]
          },
          media: {
            min: "l"
          }
        }]
      }, {
        id: "m",
        ui: "html",
        tag: "main"
      }]
    }, {
      id: "f",
      ui: "html",
      tag: "footer",
      ids: [{
        id: "copyright",
        ui: "html",
        tag: "small",
        lang: "copyright"
      }, {
        id: "lang",
        ui: "lang"
      }]
    }]
  }, {
    id: "navToggle",
    ui: "icon",
    icon: "menu",
    events: {
      click: [{
        name: "_ui-slider-toggle",
        target: "slider-lft",
        side: "bottom"
      }, {
        name: "_ui-icon-toggle",
        target: "navToggle",
        icons: ["close", "menu"]
      }]
    },
    media: {
      max: "l"
    }
  }]
};
exports.dbp = dbp;
},{"../conf/routes":3,"../data/user":5}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.de = void 0;
var de = {
  abort: "Abbrechen",
  accountData: "Kontodaten",
  actions: "Aktionen",
  active: "Aktiv",
  bekb: "BeKB",
  cardNumber: "Karten Nr",
  cardProduct: "Kartenprodukt",
  cards: "Karten",
  care: "Betreuung",
  careTodo: "Betreuung Todo",
  confirmationOfCompletion: "Abschlussbestätigung",
  "continue": "Weiter",
  contractsAndDocuments: "Verträge und Dokumente",
  copyright: "&copy; bekb.ch. Alle Rechte vorbehalten.",
  createAdditionalProduct: "Zusatzprodukt eröffnen",
  dailyLimit: "Tageslimite",
  deliveryAddress: "Lieferadresse",
  ebanking: "E-Banking",
  expiration: "Verfall",
  finance: "Finanzieren",
  firstEmbossingLine: "Erste Prägezeile",
  iban: "IBAN",
  inactive: "Inaktiv",
  invest: "Anlegen",
  monthlyLimit: "Monatslimite",
  openProduct: "Produkt eröffnen",
  overview: "Übersicht",
  partner: "Partner",
  partnerSearch: "Partnersuche",
  pay: "Zahlen",
  paymentTransactions: "Zahlungsverkehr",
  portfolio: "Portfolio",
  precaution: "Vorsorge",
  process: "Prozess",
  products: "Produkte",
  productsAdditional: "Zusatzprodukte",
  productSelection: "Produktauswahl",
  reports: "Berichte",
  safes: "Tresorfächer",
  saveUp: "Sparen",
  state: "Status",
  summary: "Zusammenfassung",
  various: "Diverse",
  // testing
  form: "Form",
  test: "Test",
  personalInfo: "Deine Personalien",
  gender: "Geschlecht",
  female: "weiblich",
  male: "männlich",
  lastname: "Name",
  firstname: "Vorname",
  zip: "PLZ",
  city: "Ort",
  accountInfo: "Dein Profil",
  email: "eMail",
  username: "Username",
  password: "Passwort",
  getNewsletter: "Newsletter erhalten",
  submit: "Let's go!"
};
exports.de = de;
},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.en = void 0;
var en = {
  abort: "Abort",
  accountData: "Account data",
  actions: "Actions",
  active: "Active",
  bekb: "BeKB",
  cardNumber: "Card no",
  cardProduct: "Card product",
  cards: "Cards",
  care: "Care",
  careTodo: "Care Todo",
  confirmationOfCompletion: "Confirmation of completion",
  "continue": "Continue",
  contractsAndDocuments: "Contracts and documents",
  copyright: "&copy; bekb.ch. All rights reserved.",
  createAdditionalProduct: "Create additional product",
  dailyLimit: "Daily limit",
  ebanking: "E-Banking",
  expiration: "Expiration",
  firstEmbossingLine: "First embossing line",
  iban: "IBAN",
  inactive: "Inactive",
  invest: "Invest",
  deliveryAddress: "Delivery address",
  finance: "Finance",
  monthlyLimit: "Monthly limit",
  openProduct: "Open product",
  overview: "Overview",
  partner: "Partner",
  partnerSearch: "Partner search",
  pay: "Pay",
  paymentTransactions: "Payment transactions",
  portfolio: "Portfolio",
  precaution: "Precaution",
  process: "Process",
  products: "Products",
  productsAdditional: "Additional Products",
  productSelection: "Product selection",
  reports: "Reports",
  safes: "Safes",
  saveUp: "Save up",
  state: "State",
  summary: "Summary",
  various: "Various"
};
exports.en = en;
},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.en = exports.de = void 0;

var _de2 = require("./de");

var _en2 = require("./en");

var de = _de2.de;
exports.de = de;
var en = _en2.en;
exports.en = en;
},{"./de":7,"./en":8}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.careOverview = void 0;

var _dbp = require("../designs/dbp");

var careO;
careO = JSON.parse(JSON.stringify(_dbp.dbp));
careO.ids[1].ids[0].ids[1].ids = [{
  id: "careIframePending",
  ui: "iframe",
  src: "localhost:5000"
}];
var careOverview = careO;
exports.careOverview = careOverview;
},{"../designs/dbp":6}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.partnerOverview = void 0;

var _dbp = require("../designs/dbp");

var partnerO;
partnerO = JSON.parse(JSON.stringify(_dbp.dbp));
partnerO.ids[1].ids[0].ids[1].ids = [];
var partnerOverview = partnerO;
exports.partnerOverview = partnerOverview;
},{"../designs/dbp":6}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.partnerProducts = void 0;

var _dbp = require("../designs/dbp");

var partnerP;
partnerP = JSON.parse(JSON.stringify(_dbp.dbp));
partnerP.ids[1].ids[0].ids[1].ids = [];
var partnerProducts = partnerP;
exports.partnerProducts = partnerProducts;
},{"../designs/dbp":6}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.partnerProductsAdditional = void 0;

var _cards = require("../data/productsAdditional/cards");

var _dbp = require("../designs/dbp");

var partnerPA;
partnerPA = JSON.parse(JSON.stringify(_dbp.dbp));
partnerPA.ids[1].ids[0].ids[1].ids = [{
  id: "toolbar",
  ui: "html",
  tag: "menu",
  type: "toolbar",
  ids: [{
    id: "additionalToolbarSwitch",
    ui: "icon",
    icon: "toggle"
  }, {
    // todo wrap select into <li>
    id: "additionalToolbarActions",
    ui: "select",
    options: [{
      lang: "actions"
    }, {
      lang: "createAdditionalProduct"
    }]
  }]
}, {
  id: "additionalAccordion",
  ui: "accordion",
  ids: [{
    id: "additionalDetailsCards",
    ui: "details",
    open: true,
    summary: {
      lang: "cards"
    },
    ids: [{
      id: "additionalTableCards",
      ui: "table",
      cols: _cards.cols,
      data: _cards.data
    }]
  }, {
    id: "additionalDetailsEbanking",
    ui: "details",
    summary: {
      lang: "ebanking"
    }
  }, {
    id: "additionalDetailsSafes",
    ui: "details",
    summary: {
      lang: "safes"
    }
  }, {
    id: "additionalDetailsPaymentTransactions",
    ui: "details",
    summary: {
      lang: "paymentTransactions"
    }
  }, {
    id: "additionalDetailsContractsAndDocuments",
    ui: "details",
    summary: {
      lang: "contractsAndDocuments"
    }
  }]
}];
var partnerProductsAdditional = partnerPA;
exports.partnerProductsAdditional = partnerProductsAdditional;
},{"../data/productsAdditional/cards":4,"../designs/dbp":6}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processOpenProduct = void 0;

var _dbp = require("../designs/dbp");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _processOpenProduct, details, steps;

steps = [{
  lang: "productSelection"
}, {
  lang: "accountData"
}, {
  lang: "deliveryAddress"
}, {
  lang: "portfolio"
}, {
  lang: "summary"
}, {
  lang: "confirmationOfCompletion"
}];
details = _processOpenProduct = JSON.parse(JSON.stringify(_dbp.dbp));
_processOpenProduct.ids[1].ids[0].ids[1].ids = [{
  id: "breadcrumb",
  ui: "breadcrumb",
  events: {
    ui: [{
      name: "ui-breadcrumb-update",
      target: "breadcrumb"
    }]
  },
  numbered: true,
  readonly: true,
  items: _toConsumableArray(steps)
}, {
  id: "openProductAccordion",
  ui: "accordion",
  ids: [{
    id: "accordionPay",
    ui: "details",
    summary: {
      lang: "pay"
    }
  }, {
    id: "accordionSaveUp",
    ui: "details",
    summary: {
      lang: "saveUp"
    }
  }, {
    id: "accordionPrecaution",
    ui: "details",
    summary: {
      lang: "precaution"
    }
  }, {
    id: "accordionInvest",
    ui: "details",
    summary: {
      lang: "invest"
    }
  }, {
    id: "accordionFinance",
    ui: "details",
    summary: {
      lang: "finance"
    }
  }, {
    id: "accordionVarious",
    ui: "details",
    summary: {
      lang: "various"
    }
  }]
}, {
  id: "openProductButtons",
  ui: "html",
  classNames: "ui-button-group",
  ids: [{
    id: "btnAbort",
    ui: "button",
    lang: "abort"
  }, {
    id: "btnContinue",
    ui: "button",
    lang: "continue"
  }]
}];
var processOpenProduct = _processOpenProduct;
exports.processOpenProduct = processOpenProduct;
},{"../designs/dbp":6}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportsOverview = void 0;

var _dbp = require("../designs/dbp");

var reportsO;
reportsO = JSON.parse(JSON.stringify(_dbp.dbp));
reportsO.ids[1].ids[0].ids[1].ids = [];
var reportsOverview = reportsO;
exports.reportsOverview = reportsOverview;
},{"../designs/dbp":6}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.$$ = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// $$
var $$ = function () {
  var d, dp, isNode;
  d = document;
  dp = new DOMParser();

  isNode = function isNode(elm) {
    return elm instanceof HTMLElement;
  }; // @DESC   find element(s)
  // @PARAM  p1  MAN {string}      CSS selector
  // @PARAM  p2  OPT {string|Node} parent container
  // @RETURN {Node|array}  node or array of nodes or empty array
  // @DESC   create element
  // @PARAM  p1  MAN {string}  <tagName/> (e.g. $$ '<div/>')
  // @PARAM  p2  OPT {object}  attributes of new element
  // @RETURN {Node}


  exports.$$ = $$ = function $$(p1, p2) {
    var $elm, $elms, k, ref, v;

    if (!p1 || typeof p1 !== "string") {
      return this;
    } // CREATE element


    if (p1.slice(0, 1) === "<" && p1.slice(-2) === "/>") {
      $elm = d.createElement(p1.slice(1, -2));
      ref = p2 || {};

      for (k in ref) {
        v = ref[k];

        if (k === "innerText") {
          $elm.innerText = v;
        } else {
          $elm.setAttribute(k, v);
        }
      }

      return $elm;
    } // CHECK for parentNode


    if (p2 && typeof p2 === "string") {
      p2 = d.querySelector(p2);
    }

    if (!p2) {
      p2 = d;
    } // FIND element(s) in parent


    $elms = p2.querySelectorAll(p1);

    if (!$elms.length) {
      return [];
    } // return found element(s)


    if ($elms.length === 1) {
      return $elms[0];
    } else {
      return $elms;
    }
  }; // @DESC   (bulk) append element(s) to HTMLNode


  $$.append = function (toAppend, $t) {
    (isNode(toAppend) ? [toAppend] : toAppend).forEach(function (elm) {
      return $t.appendChild(elm);
    });
    return this;
  };

  $$.measure = function (str, fs) {
    var $hlp, measures;
    $hlp = this("<span/>", {
      innerText: str
    });
    this.css($hlp, {
      position: "absolute",
      left: "-9999px",
      top: "-9999px"
    });

    if (fs) {
      this.css($hlp, {
        fontSize: "".concat(fs, "px")
      });
    }

    document.body.appendChild($hlp);
    measures = {
      h: $hlp.clientHeight,
      w: $hlp.clientWidth
    };
    document.body.removeChild($hlp);
    return measures;
  }; // @DESC   parse HTML string to node tree
  // @PARAM  MAN {str}   HTML string to parse
  // @RETURN {node|$$}


  $$.parse = function (str) {
    if (!str || typeof str !== "string") {
      return $$;
    } // return parsed node


    return dp.parse(str);
  }; // @DESC   get/set css of element
  // @PARAM  elms    MAN {Node|string} element(s) or selector
  // @PARAM  obj     MAN {json|string} styles to set or property
  // @RETURN {string|$$}


  $$.css = function (elms, obj) {
    var i, j, k, ref, v;

    if (!elms || !obj) {
      return this;
    } // get node by selector


    if (typeof elms === "string") {
      elms = $$(elms);
    } // set element style


    if (_typeof(obj) === "object") {
      if (!elms.length) {
        elms = [elms];
      }

      for (i = j = 0, ref = elms.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        for (k in obj) {
          v = obj[k];
          elms[i].style[k] = v;
        }
      }

      return this;
    } // get computed style for element


    v = window.getComputedStyle(elms)[obj]; // return parsed style

    if (v.slice(-2) === "px" && v.indexOf(" " === -1)) {
      return parseFloat(v);
    } else {
      return v;
    }
  }; // @DESC   get all previous siblings
  // @PARAM  elm   MAN {node|string} element or selector
  // @RETURN {array|$$}


  $$.prevAll = function (elm) {
    // delegate to $$.nextAll
    return this.nextAll(elm, {
      prev: true
    });
  }; // @DESC     get all next siblings
  // @PARAM    elm       MAN {node|string} element or selector
  // @PARAM    opt.prev  OPT {boolean}     $$.prevAll delegation
  // @RETURN  {array}


  $$.nextAll = function (elm, opt) {
    var dir, sib, sibs;
    opt = opt || {};

    if (!elm) {
      return;
    } // find element by selector


    if (typeof elm === "string") {
      elm = $$(elm);
    }

    if (!elm) {
      return this;
    } // only one element
    // (default: first in NodeList)


    if (elm.length) {
      elm = elm[0];
    } // collect next siblings


    sibs = [];
    sib = elm;
    dir = opt.prev ? "previous" : "next";

    while (true) {
      sib = sib[dir + "Sibling"];

      if (!sib) {
        break;
      }

      sibs.push(sib);
    }

    return sibs;
  }; // @DESC   get parent node
  // @PARAM  $elm  MAN {node|string} element or selector
  // @PARAM  sel   OPT {string}      parent selector
  // @RETURN {node}


  $$.parent = function ($elm, sel) {
    var _selMatch;

    if (!$elm) {
      return this;
    } // just return direct parent node


    if (arguments.length === 1) {
      return $elm.parentNode;
    } // look for requested parent


    _selMatch = function selMatch($elm, sel) {
      if ($elm.matches(sel)) {
        return $elm;
      } else {
        return _selMatch($elm.parentNode, sel);
      }
    };

    return _selMatch($elm.parentNode, sel);
  }; // @DESC   checks for existence of a class on a node
  // @PARAM  $elm    MAN {node|string} element or selector
  // @PARAM  cn      MN  {string}      class to check
  // @RETURN {boolean||$$}


  $$.hasClass = function ($elm, cn) {
    if (!$elm || !cn || typeof cn !== "string") {
      return this;
    }

    if (typeof $elm === "string") {
      $elm = $$($elm);
    }

    if (!$elm) {
      return this;
    }

    if ($elm.length) {
      $elm = $elm[0];
    }

    if ($elm.className.indexOf(cn) > -1) {
      return true;
    } else {
      return false;
    }
  }; // @DESC   adds a class to node
  // @PARAM  $elm  MAN {node|string} element or selector
  // @PARAM  cn    MAN {string}      class to add
  // @RETURN {$$}


  $$.addClass = function ($elm, cn) {
    if (!$elm || !cn || typeof cn !== "string") {
      return this;
    } // GET node by selector


    if (typeof $elm === "string") {
      $elm = $$($elm);
    }

    if (!$elm) {
      return this;
    } // MULTIPLE NODES matched


    if ($elm.length) {
      $elm = $elm[0];
    } // ALREADY attached class


    if ($elm.className.indexOf(cn) > -1) {
      return this;
    } // ADD class


    $elm.className += " " + cn;
    return this;
  }; // @DESC   removes a class from node
  // @PARAM  $elm  MAN {node|string} element or selector
  // @PARAM  cn    MAN {string}      class to remove
  // @RETURN {$$}


  $$.removeClass = function ($elm, cn) {
    var cns, idx;

    if (!$elm || !cn || typeof cn !== "string") {
      return this;
    } // GET node by selector


    if (typeof $elm === "string") {
      $elm = $$($elm);
    }

    if (!$elm) {
      return this;
    } // MATCHED multiple nodes


    if ($elm.length) {
      $elm = $elm[0];
    }

    if (!$elm.className) {
      return this;
    } // GET index of toRemove class


    cns = $elm.className.split(" ");
    idx = cns.indexOf(cn); // REMOVE class from node

    if (idx > -1) {
      cns.splice(idx, 1);
      $elm.className = cns.join(" ");
    }

    return this;
  }; // @DESC   toggles a node class
  // @PARAM  elm       MAN {node|string} element or selector
  // @PARAM  toToggle  MAN {string}  class to toggle
  // @RETURN {$$}


  $$.toggleClass = function (elm, toToggle) {
    var cns, idx;

    if (!elm || !toToggle) {
      return this;
    }

    if (typeof elm === "string") {
      elm = $$(elm);
    }

    if (!elm) {
      return $$;
    }

    if (elm.length) {
      elm = elm[0];
    }

    cns = elm.className.split(" ");
    idx = cns.indexOf(toToggle);

    if (idx === -1) {
      elm.className = cns.join(" ") + " " + toToggle;
    } else {
      cns.splice(idx, 1);
      elm.className = cns.join(" ");
    }

    return this;
  }; // @DESC   toggles style.display
  // @PARAM  elm   MAN {node|string} element or selector
  // @PARAM  dsp   OPT {string}      visible type (@DEF:block|flex)
  // @RETURN {$$}


  $$.toggle = function (elm, dsp) {
    var curDsp;

    if (!elm) {
      return $$;
    }

    dsp = dsp || "block";

    if (typeof elm === "string") {
      elm = $$(elm);
    }

    if (!elm) {
      return $$;
    }

    if (elm.length) {
      elm = elm[0];
    }

    curDsp = elm.style.display;
    elm.style.display = curDsp === "none" ? dsp : "none";
    return $$;
  }; // @DESC   uppercase first character of string
  // @PARAM  str   MAN {string}  string
  // @RETURN {string|$$}


  $$.ucFirst = function (str) {
    if (!str || typeof str !== "string") {
      return $$;
    } // RETURN string


    return str.charAt(0).toUpperCase() + str.slice(1);
  }; // @DESC   extend object with additional properties
  // @DESC   (o.x overwrites t.x if t.x exists)
  // @PARAM  t MAN {json}  target object
  // @PARAM  o MAN {json}  object to merge into target


  $$.extend = function (t, o) {
    var k;

    for (k in o) {
      t[k] = o[k];
    }

    return t;
  }; // @DESC   get index of DOM node compared to siblings (0..n)
  // @PARAM  $elm  MAN {node|string} element or selector
  // @RETURN {integer} index or -1


  $$.index = function ($elm) {
    var $p;

    if (!$elm) {
      return $$;
    } // FIND element by selector
    // ...return  when no match


    if (typeof $elm === "string") {
      $elm = $$($elm);
    }

    if (!$elm) {
      return $$;
    } // ONLY ONE element
    // ...and get its parent node


    if ($elm.length) {
      $elm = $elm[0];
    }

    $p = $elm.parentNode; // RETURN index or -1

    return Array.prototype.indexOf.call($p.childNodes, $elm);
  }; // @DESC   listen to an event
  // @PARAM  $elms MAN {Node|string} element(s) or selector
  // @PARAM  event MAN {string}      event name
  // @PARAM  cb    MAN {function}    callback function
  // @RETURN {$$}


  $$.listen = function ($elms, event, cb) {
    var $elm, j, len;

    if (!$elms || !event || !cb) {
      return this;
    } // get node by selector


    if (typeof $elms === "string") {
      $elms = $$($elms);
    }

    if (!$elms.length) {
      $elms = [$elms];
    } // add event listeners


    for (j = 0, len = $elms.length; j < len; j++) {
      $elm = $elms[j];
      $elm.addEventListener(event, cb);
    }

    return this;
  }; // @DESC   destroy event listener
  // @PARAM  $elms   MAN {Node|string} element(s) or selector
  // @PARAM  event   MAN {string}      event name
  // @PARAM  handler MAN {function}    attached handler
  // @RETURN {$$}


  $$.destroy = function ($elms, event, handler) {
    var $elm, j, len;

    if (!$elms || !event || !handler) {
      return this;
    } // GET node by selector


    if (typeof $elms === "string") {
      $elms = $$($elms);
    }

    if (!$elms.length) {
      $elms.removeEventListener(event, handler);
    } else {
      // DESTROY event listeners
      for (j = 0, len = $elms.length; j < len; j++) {
        $elm = $elms[j];
        $elm.removeEventListener(event, handler);
      }
    }

    return this;
  }; // @DESC   API create request
  // @PARAM  path  MAN {string}    request path
  // @PARAM  dta   OPT {object}    request data
  // @PARAM  cb    OPT {function}  callback
  // @RETURN {$$}


  $$.create = function (path, dta, cb) {
    if (!path) {
      return;
    }

    return this;
  }; // @DESC   API read request
  // @PARAM  path  MAN {string}    request path
  // @PARAM  dta   OPT {object}    request data
  // @PARAM  cb    MAN {function}  callback
  // @RETURN {$$}


  $$.read = function (path, dta, cb) {
    var arg, xhr;
    arg = arguments;

    if (!arg[0]) {
      return this;
    } // NO DATA to send


    if (arg.length === 2) {
      // SECOND PARAM must be callback
      if (typeof arg[1] !== "function") {
        return this;
      } // NO DATA but callback


      cb = arg[1];
      dta = null;
    }

    if (!cb || typeof cb !== "function") {
      return this;
    } // create AJAX request


    xhr = new XMLHttpRequest(); // response loaded (execute callback)

    xhr.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        return cb(this.responseText);
      }
    }; // send request


    xhr.open("GET", path);
    xhr.send(dta);
    return this;
  }; // @DESC   API update request
  // @PARAM  path  MAN {string}    request path
  // @PARAM  dta   MAN {object}    request data
  // @PARAM  cb    OPT {function}  callback
  // @RETURN {$$}


  $$.update = function (path, dta, cb) {
    if (!path || !dta) {
      return this;
    }

    return this;
  }; // @DESC   API delete request
  // @RETURN {$$}


  $$["delete"] = function (path, dta, cb) {
    if (!path || !dta || !cb) {
      return this;
    }

    return this;
  }; // @DESC   preload media
  // @RETURN {$$}


  $$.preload = function (opt) {
    var cb, cbFile, img, itm, itms, j, len, loaded, supported, toLoad, type;
    opt = opt || {};
    itms = opt.items || [];
    cbFile = opt.onFileLoaded;
    cb = opt.onFinish;
    loaded = 0;
    toLoad = itms.length;
    supported = ["jpg", "png"];

    if (!toLoad || !cb || typeof cb !== "function") {
      return $$;
    }

    for (j = 0, len = itms.length; j < len; j++) {
      itm = itms[j];
      type = itm.split(".").pop();

      if (supported.indexOf(type) === -1) {
        return $$;
      }

      img = new Image();

      img.onload = function () {
        if (++loaded === toLoad) {
          return cb(toLoad);
        } else if (opt.onFileLoaded) {
          return opt.onFileLoaded(this.getAttribute("src"));
        }
      };

      img.src = itm;
    }
  }; // SPA history handling


  $$.history = {
    // @DESC   update current state
    // @PARAM  name  MAN {string}  site name
    // @PARAM  path  MAN {string}  site path (route)
    // @RETURN {$$}
    go: function go(name, path) {
      return history.pushState({
        site: name
      }, null, path);
    }
  };
  return $$;
}();

exports.$$ = $$;
},{}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.state = exports.stalker = exports.site = exports.obs = exports.media = exports.$$ = void 0;

var _dom2 = require("./dom");

var _media2 = require("./media");

var _obs2 = require("./obs");

var _site2 = require("./site");

var _stalker2 = require("./stalker");

var _state2 = require("./state");

var $$ = _dom2.$$;
exports.$$ = $$;
var media = _media2.media;
exports.media = media;
var obs = _obs2.obs;
exports.obs = obs;
var site = _site2.site;
exports.site = site;
var stalker = _stalker2.stalker;
exports.stalker = stalker;
var state = _state2.state;
exports.state = state;
},{"./dom":16,"./media":18,"./obs":19,"./site":20,"./stalker":21,"./state":22}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.media = void 0;

var _dom = require("./dom");

var _obs = require("./obs");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var media = function () {
  var bps, fireEvent, handleResize, isInViewport, throttle, uis; // breakpoints
  // (!) in sync with rupture

  bps = {
    xs: 0,
    s: 400,
    m: 500,
    l: 800,
    xl: 1050,
    hd: 1800
  }; // throttling resize event

  throttle = {
    delay: 100,
    active: false
  }; // loaded / not loaded UIs

  uis = {
    loaded: [],
    notLoaded: []
  }; // fires custom and UI events

  fireEvent = function fireEvent(event) {
    var eventName, eventTarget;
    eventName = event.name;
    eventTarget = event.target;
    return uis.loaded.forEach(function (uiLoaded) {
      var events;
      var _uiLoaded$events = uiLoaded.events;
      events = _uiLoaded$events === void 0 ? {} : _uiLoaded$events;
      return Object.keys(events).forEach(function (eventType) {
        return events[eventType].forEach(function (ev) {
          if (ev.name !== eventName) {
            return;
          }

          if (!ev.$target) {
            ev.$target = (0, _dom.$$)("#".concat(ev.target));
          }

          return _obs.obs.f(eventName, uiLoaded);
        });
      });
    });
  };

  handleResize = function handleResize() {
    var notLoaded;

    _obs.obs.f("_ankh-resize");

    notLoaded = _toConsumableArray(uis.notLoaded);
    uis.notLoaded = []; // all not loaded UIs have to try again on this viewport

    notLoaded.forEach(function (opt) {
      return _obs.obs.f("_ui-".concat(opt.ui, "-init"), opt);
    }); // the loaded ones ned a shown/hidden update

    uis.loaded.forEach(function (opt) {
      if (!opt.media) {
        return;
      }

      (0, _dom.$$)("#".concat(opt.id)).setAttribute("data-fx", isInViewport(opt.media) ? "in" : "out");
    });
  };

  isInViewport = function isInViewport() {
    var media = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var max, min, vpW;
    vpW = window.innerWidth;
    min = bps[media.min];
    max = bps[media.max];

    if (min && vpW <= min) {
      return false;
    }

    if (max && vpW > max) {
      return false;
    }

    return true;
  };

  _obs.obs.l("_ankh-ui-fire", fireEvent);

  _obs.obs.l("_ankh-ui-loaded", function (opt) {
    uis.loaded.push(opt);
    return setTimeout(function () {
      return _obs.obs.f("ui-lang-update");
    });
  });

  _obs.obs.l("_ankh-ui-not-loaded", function (opt) {
    return uis.notLoaded.push(opt);
  });

  _dom.$$.listen(window, "resize", function (e) {
    var lastResize;

    if (!throttle.active) {
      handleResize();
      throttle.active = true;
      setTimeout(function () {
        return throttle.active = false;
      }, throttle.delay);
    }

    clearTimeout(lastResize);
    return lastResize = setTimeout(function () {
      return handleResize;
    }, throttle.delay);
  });

  return {
    isInViewport: isInViewport
  };
}();

exports.media = media;
},{"./dom":16,"./obs":19}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.obs = void 0;

// CORE observer
var obs = function () {
  var evs; // @DEFINE   evs {json}  event registrations
  // @EXAMPLE  'name-of-event': [ cb1, cb2, cb3 ]
  // @PRIVATE

  evs = {};
  return {
    // @DESC   add event listener and attach a handler
    // @PARAM  ev  MAN {string}    event name
    // @PARAM  cb  MAN {function}  callback
    // @RETURN {@} chaining pattern
    // @PUBLIC
    l: function l(ev, cb) {
      // MANDATORY event name & callback
      if (arguments.length !== 2 || typeof ev !== "string" || typeof cb !== "function") {
        return this;
      }

      if (!evs[ev]) {
        evs[ev] = [cb];
      } else {
        evs[ev].push(cb);
      }

      return this;
    },
    // @DESC   fire attached event handlers
    // @PARAM  ev    MAN {string}  event name
    // @PARAM  arg   OPT {*}       handler param
    // @RETURN {@}   chaining pattern
    // @PUBLIC
    f: function f(ev, arg) {
      var cb, cbs, i, len;

      if (!ev || typeof ev !== "string") {
        return this;
      } // NO HANDLERS attached to event


      cbs = evs[ev];

      if (!cbs || !cbs.length) {
        return this;
      }

      for (i = 0, len = cbs.length; i < len; i++) {
        cb = cbs[i]; // FIRE event handlers

        cb(arg);
      }

      return this;
    },
    // @DESC   removes event listeners by name
    // @DESC   without args all will be removed
    // @DESC   events starting with _ are protected
    // @PARAM  ev    OPT {string}  event name
    r: function r(ev) {
      if (ev) {
        delete evs[ev];
      } else {
        Object.keys(evs).forEach(function (name) {
          if (name[0] !== "_") {
            return delete evs[name];
          }
        });
      }

      return this;
    }
  };
}();

exports.obs = obs;
},{}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.site = void 0;

var _dom = require("./dom");

var _obs = require("./obs");

var _media = require("./media");

var _routes = require("../apps/dbp/conf/routes");

var _processOpenProduct = require("../apps/dbp/sites/processOpenProduct");

var _careOverview = require("../apps/dbp/sites/careOverview");

var _partnerOverview = require("../apps/dbp/sites/partnerOverview");

var _partnerProducts = require("../apps/dbp/sites/partnerProducts");

var _partnerProductsAdditional = require("../apps/dbp/sites/partnerProductsAdditional");

var _reportsOverview = require("../apps/dbp/sites/reportsOverview");

// HELPER site
_dom.$$.listen(window, "popstate", function (e) {
  return e.preventDefault();
});

var site = function () {
  var $ankh, $b, Site, d, getCurrentSite, getDefaultSite, getSiteName, getUiCount, getUisFlattened, handleReady, _load, render;

  d = document;
  $b = (0, _dom.$$)("body");
  $ankh = (0, _dom.$$)("#ankh", $b);
  Site = {
    careOverview: _careOverview.careOverview,
    partnerOverview: _partnerOverview.partnerOverview,
    partnerProducts: _partnerProducts.partnerProducts,
    partnerProductsAdditional: _partnerProductsAdditional.partnerProductsAdditional,
    processOpenProduct: _processOpenProduct.processOpenProduct,
    reportsOverview: _reportsOverview.reportsOverview
  };

  getUisFlattened = function getUisFlattened(uis) {
    var f, _r;

    f = [];

    _r = function r(u) {
      return u.map(function (ui) {
        return f.push(ui) && ui.ids && _r(ui.ids);
      });
    };

    _r(uis);

    return f;
  };

  getUiCount = function getUiCount(uis) {
    var c, _r2;

    c = 0;

    _r2 = function r(subUis) {
      return subUis.map(function (subUi, idx) {
        if (subUi.media && !_media.media.isInViewport(subUi.media)) {
          return;
        }

        ++c;

        if (subUi.ids && subUi.ids.length) {
          return _r2(subUi.ids);
        }
      });
    };

    _r2(uis);

    return c;
  };

  render = function render($root) {
    (0, _dom.$$)(".ui-progress", $b).setAttribute("data-fx", "out");
    $ankh.replaceWith($root);
    setTimeout(function () {
      return _obs.obs.f("_ankh-ready");
    });
  };

  handleReady = function handleReady(uis, $root) {
    var c, r;
    r = 0;
    c = getUiCount(uis);

    _obs.obs.r("ankh-ui-ready");

    return _obs.obs.l("ankh-ui-ready", function (ui) {
      ++r;

      if (r === c) {
        return render($root);
      }
    });
  };

  getCurrentSite = function getCurrentSite(itm) {
    var _getFirstSubId;

    exports.site = site = {
      id: itm.id,
      path: itm.path
    };

    _getFirstSubId = function getFirstSubId(subItms) {
      var subItm;
      subItm = subItms[0];

      if (subItm.items) {
        return _getFirstSubId(subItm.items);
      } else {
        site.id = subItm.id;
        return site.path = subItm.path;
      }
    };

    if (itm.items) {
      _getFirstSubId(itm.items);
    }

    site.name = site.id.split("site-")[1];
    return site;
  }; //- site name by path
  //<! itms {json[]} items
  //<! path {string} site path


  getSiteName = function getSiteName(itms, path) {
    var _handleSubs;

    exports.site = site = {};

    _handleSubs = function handleSubs(subItms) {
      return subItms.some(function (subItm) {
        if (subItm.path === path) {
          return exports.site = site = getCurrentSite(subItm);
        } else if (subItm.items) {
          return _handleSubs(subItm.items);
        }
      });
    };

    _handleSubs(itms);

    return site;
  }; //-  returns default site on 404
  //<! itms  {json[]} nav items


  getDefaultSite = function getDefaultSite(itms) {
    return getSiteName(itms, itms[0].path);
  }; //- loads site
  //<! path {string} path of site


  _load = function load(path) {
    var $root, i, len, ui, uis;
    $root = (0, _dom.$$)("<div/>", {
      id: "ankh"
    }); // load deepest level of clicked nav item

    exports.site = site = getSiteName(_routes.routes, path);

    if (!site.name) {
      exports.site = site = getDefaultSite(_routes.routes);
    }

    if (site.path !== path) {
      return _load(site.path);
    }

    _dom.$$.history.go(site.name, site.path);

    $b.setAttribute("data-site", site.name);
    uis = (Site[site.name] || {}).ids;

    if (!uis) {
      return;
    }

    handleReady(uis, $root);

    for (i = 0, len = uis.length; i < len; i++) {
      ui = uis[i];
      ui.target = $root;

      _obs.obs.f("_ui-".concat(ui.ui, "-init"), ui);
    }
  };

  _obs.obs.l("_helper-site-load", function (event) {
    _obs.obs.r();

    _load(event.target.getAttribute("href"));
  });

  return {
    load: _load
  };
}();

exports.site = site;
},{"../apps/dbp/conf/routes":3,"../apps/dbp/sites/careOverview":10,"../apps/dbp/sites/partnerOverview":11,"../apps/dbp/sites/partnerProducts":12,"../apps/dbp/sites/partnerProductsAdditional":13,"../apps/dbp/sites/processOpenProduct":14,"../apps/dbp/sites/reportsOverview":15,"./dom":16,"./media":18,"./obs":19}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stalker = void 0;

// HELPER stalker
var stalker = function () {
  var d, getVisEvent, log, offLine, onLine, state, stateChange; // @DEFINE variables

  d = document;
  log = [];
  state = "visibilityChange"; // EVENT handler

  onLine = function onLine() {
    return log.push(["online", +new Date()]);
  };

  offLine = function offLine() {
    return log.push(["offline", +new Date()]);
  };

  stateChange = function stateChange() {
    return log.push([d[state], +new Date()]);
  }; // @DESC get event name of page visibility API


  getVisEvent = function getVisEvent() {
    var hidden, visChange;

    if (typeof d.hidden !== "undefined") {
      hidden = "hidden";
      visChange = "visibilitychange";
    } else if (typeof d.mozHidden !== "undefined") {
      hidden = "mozHidden";
      visChange = "mozvisibilitychange";
      state = "mozVisibilityState";
    } else if (typeof d.msHidden !== "undefined") {
      hidden = "msHidden";
      visChange = "msvisibilitychange";
      state = "msVisibilityState";
    } else if (typeof d.webkitHidden !== "undefined") {
      hidden = "webkitHidden";
      visChange = "webkitvisibilitychange";
      state = "webkitVisibilityState";
    }

    d.addEventListener(visChange, stateChange);
    return log.push([d[state], +new Date()]);
  };

  return {
    // @DESC   start stalking
    // @RETURN {void}
    // @PUBLIC
    init: function init() {
      // ATTACH events
      window.addEventListener("online", onLine);
      window.addEventListener("offline", offLine);
      log.push([navigator.onLine ? "online" : "offline", +new Date()]);
    }
  };
}();

exports.stalker = stalker;
},{}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.state = void 0;

// CORE state
var state = function () {
  var ls, prefix;
  exports.state = state = {};
  prefix = location.host + "-";
  ls = {
    // @DESC   set/update item in localStorage
    // @PARAM  id    MAN {string}  id of UI
    // @PARAM  state MAN {object}  current state
    // @RETURN {void}
    set: function set(id, state) {
      if (!id || !state) {
        return;
      }

      if (typeof state !== "string") {
        state = JSON.stringify(state);
      }

      localStorage.setItem(prefix + id, state);
    },
    // @DESC   get item from localStorage
    // @PARAM  id  MAN {string}  id of UI
    // @RETURN {json|null}       current UI state or null
    get: function get(id) {
      var s;

      if (!id) {
        return;
      }

      s = localStorage.getItem(prefix + id);

      if (s && s.slice(0, 1) === "{") {
        return JSON.parse(s);
      } else {
        return s;
      }
    },
    // @DESC   remove item from localStorage
    // @PARAM  id    MAN {string}  id of UI
    // @RETURN {void}
    rm: function rm(id) {
      if (!id) {
        return;
      }

      localStorage.removeItem(prefix + id);
    }
  };
  return {
    // @DESC   set/update UI state
    // @PARAM  opt.id    MAN {string}  id of UI
    // @PARAM  opt.state MAN {string}  current state
    // @RETURN {void}
    set: function set(opt) {
      var id;
      opt = opt || {};
      id = opt.id;
      exports.state = state = opt.state;

      if (!id || !state) {
        return;
      } // SET state in localStorage


      return ls.set(id, state);
    },
    // @DESC   get current UI state
    // @PARAM  opt.id  MAN {string}  id of UI
    // @RETURN {json}  current UI state or {}
    get: function get(opt) {
      var id;
      opt = opt || {};
      id = opt.id;

      if (!id) {
        return;
      } // GET state from localStorage


      return ls.get(id);
    },
    // @DESC   remove UI state
    // @PARAM  opt.id  MAN {string} id of UI
    // @RETURN {void}
    rm: function rm(opt) {
      var id;
      opt = opt || {};
      id = opt.id;

      if (!id) {
        return;
      }

      return ls.rm(id);
    }
  };
}();

exports.state = state;
},{}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accordion = void 0;

var _core = require("../core");

// UI accordion
var accordion = function () {
  var init; // @DESC   build new accordion
  // @PARAM  opt.id      MAN {string}      ui id
  // @PARAM  opt.ids     OPT {json}        ui-details configs
  // @PARAM  opt.target  MAN {HTMLElement} ui target

  init = function init(opt) {
    var $t, $ui, id, ids;
    id = opt.id;
    var _opt$ids = opt.ids;
    ids = _opt$ids === void 0 ? [] : _opt$ids;
    $t = opt.target;

    if (!id || !$t) {
      return;
    }

    $ui = (0, _core.$$)("<section/>", {
      "class": "ui-accordion"
    });
    ids.map(function (ui) {
      ui.target = $ui;
      return _core.obs.f("_ui-details-init", ui);
    });
    $t.appendChild($ui);

    _core.obs.f("ankh-ui-ready", "ui-accordion");
  };

  _core.obs.l("_ui-accordion-init", init);
}();

exports.accordion = accordion;
},{"../core":17}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.article = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _core = require("../core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// UI article
var article = function () {
  return {
    // @DESC   build new article
    // @PARAM  opt.title           {string}  title
    // @PARAM  opt.items           {[json]}  paragraph or code block
    // @PARAM  opt.items.$.lang    {json}    id to paragraph text or programming lang
    // @PARAM  opt.items.$.code    {json}    code block with syntax highlighting
    // @PARAM  opt.author          {json}    author object
    // @PARAM  opt.author.username {string}  author username
    // @PARAM  opt.author.email    {string}  author email
    // @PARAM  opt.author.website  {string}  author website
    // @PARAM  opt.createdAt       {date}    date of article creation
    // @RETURN {void}
    // @PUBLIC
    init: function init(opt) {
      var $address, $code, $elm, $footer, $pre, $t, $time, $title, $ui, i, itm, itms, len, title; // DEFINE variables

      opt = opt || {};
      $t = opt.target;
      title = opt.title;
      itms = opt.items;

      if (!$t || !title || !itms) {
        return;
      } // MARKUP UI


      $ui = (0, _core.$$)("<article/>", {
        "class": "ui-article"
      }); // ADD article title

      $title = (0, _core.$$)("<h2/>", {
        "data-lang": title
      });
      $ui.appendChild($title); // ADD article items

      for (i = 0, len = itms.length; i < len; i++) {
        itm = itms[i]; // code block

        if (itm.code) {
          $pre = (0, _core.$$)("<pre/>");
          $code = (0, _core.$$)("<code/>", {
            "class": itm.lang
          });
          $code.innerHTML = itm.code;
          $pre.appendChild($code);
          $elm = (0, _core.$$)("<p/>").appendChild($pre);
        } else {
          // normal paragraph
          $elm = (0, _core.$$)("<p/>", {
            "data-lang": itm.lang
          });
        }

        $ui.appendChild($elm);
      } // article footer required?


      if (opt.author || opt.createdAt) {
        $footer = (0, _core.$$)("<footer/>"); // add article author

        if (opt.author) {
          $address = (0, _core.$$)("<address/>");
          $address.innerText = "by " + opt.author.username;
          $footer.appendChild($address);
        } // add article creation date


        if (opt.createdAt) {
          $time = (0, _core.$$)("<time/>", {
            datetime: opt.createdAt,
            pubdate: "pubdate"
          });
          $time.innerHTML = (0, _moment["default"])(opt.createdAt).fromNow();
          $footer.appendChild($time);
        } // APPEND UI to DOM target


        $ui.appendChild($footer);
      }

      $t.appendChild($ui);
    }
  };
}();

exports.article = article;
},{"../core":17,"moment":57}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.breadcrumb = void 0;

var _core = require("../core");

// UI breadcrumb
var breadcrumb = function () {
  var init, ui;
  ui = {
    // @DESC   updates a breadcrumb
    // @PARAM  active    OPT {number}      active item
    // @PARAM  $target   MAN {HTMLElement} breadcrumb reference
    update: function update(options) {
      var $active, $items, $target, active;
      var _options$active = options.active;
      active = _options$active === void 0 ? 0 : _options$active;
      $target = options.$target;
      $items = (0, _core.$$)("a", $target);
      $active = (0, _core.$$)(".active", $target);

      if ($active) {
        _core.$$.removeClass($active, "active");
      }

      _core.$$.addClass($items[active], "active");
    },
    // @DESC   returns a breadcrumb item
    // @PARAM  lang    OPT {string} lang reference of innerText
    getItem: function getItem(item) {
      var $item, lang;
      lang = item.lang;
      $item = (0, _core.$$)("<a/>");

      if (lang) {
        $item.setAttribute("data-lang", lang);
      }

      return $item;
    }
  }; // @DESC   inits a new breadcrumb
  // @PARAM  active    OPT {number}      index of active item (default: 0)
  // @PARAM  id        MAN {string}      ui id
  // @PARAM  items     MAN {json[]}      breadcrumb items
  // @PARAM  numbered  OPT {boolean}     items are numbered
  // @PARAM  readonly  OPT {boolean}     no click events
  // @PARAM  target    MAN {HTMLElement} target node

  init = function init(options) {
    var $t, $ui, active, events, id, items, m, numbered, readonly, updateEvent;
    var _options$active2 = options.active;
    active = _options$active2 === void 0 ? 0 : _options$active2;
    id = options.id;
    items = options.items;
    events = options.events;
    m = options.media;
    numbered = options.numbered;
    readonly = options.readonly;
    $t = options.target;

    if (!id || !(items != null ? items.length : void 0) || !$t) {
      return;
    }

    if (m && !_core.media.isInViewport(m)) {
      return _core.obs.f("_ankh-ui-not-loaded", options);
    }

    $ui = (0, _core.$$)("<nav/>", {
      id: id,
      "class": "ui-breadcrumb"
    });

    if (numbered) {
      _core.$$.addClass($ui, "numbered");
    }

    if (readonly) {
      _core.$$.addClass($ui, "readonly");
    }

    items.forEach(function (item) {
      return $ui.appendChild(ui.getItem(item));
    });
    $t.appendChild($ui);
    updateEvent = {
      name: "ui-breadcrumb-update",
      target: id
    };

    if (!events) {
      options.events = {};
    }

    events.ui = [updateEvent];

    _core.obs.l("_ankh-ready", function () {
      return _core.obs.f("_ankh-ui-fire", updateEvent);
    });

    _core.obs.f("_ankh-ui-loaded", options);

    _core.obs.f("ankh-ui-ready", "ui-breadcrumb#".concat(id));
  };

  _core.obs.l("ui-breadcrumb-update", function (options) {
    return options.events.ui.forEach(function (uiEvent) {
      return ui.update(uiEvent);
    });
  });

  _core.obs.l("_ui-breadcrumb-init", init);
}();

exports.breadcrumb = breadcrumb;
},{"../core":17}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.button = void 0;

var _core = require("../core");

// UI button
var button = function () {
  var init, ui;
  ui = {
    evs: {
      click: function click(e) {
        var $elm, ev, evs, i, len;
        $elm = e.target;

        if ($elm.tagName === "I") {
          $elm = $elm.parentNode;
        } // FIND custom 'click' events


        evs = $elm.events || {};
        evs = evs.click;

        if (!evs || !evs.length) {
          return;
        }

        for (i = 0, len = evs.length; i < len; i++) {
          ev = evs[i];

          if (ev) {
            // FIRE custom 'click' events
            _core.obs.f(ev.ev, ev.arg);
          }
        }
      }
    }
  }; // @DESC   inits a new button
  // @PARAM  opt.id            MAN {string}    UI id
  // @PARAM  opt.lang          OPT {string}    lang ref
  // @PARAM  opt.icon          OPT {string}    ion name
  // @PARAM  opt.events        OPT {json}      custom events to bind
  // @PARAM  opt.events.click  OPT {[string]}  list of custom 'click' events
  // @PARAM  opt.target        MAN {node}      target node
  // @RETURN {void}
  // @PUBLIC

  init = function init(opt) {
    var $t, $ui, evs, icon, id, lang, m;
    evs = opt.events;
    id = opt.id;
    lang = opt.lang;
    m = opt.media;
    icon = opt.icon;
    $t = opt.target;

    if (!icon && !lang || !id || !$t) {
      return;
    }

    if (_core.media && !_core.media.isInViewport(m)) {
      return _core.obs.f("_ankh-ui-not-loaded", opt);
    }

    $ui = (0, _core.$$)("<button/>", {
      id: id,
      "class": "ui-button"
    });

    if (evs) {
      $ui.events = evs;
    } //if evs.click  then $$.listen $ui, 'click', ui.evs.click

    /*if evs.click
      hand = new Hammer.Manager $ui
      hand.add new Hammer.Tap()
      hand.on "tap", ui.evs.click
    */
    // SET caption/icon


    if (lang) {
      $ui.setAttribute("data-lang", lang);
    } else {
      $ui.appendChild((0, _core.$$)("<i/>", {
        "class": icon
      }));
    } // APPEND UI to target


    $t.appendChild($ui);

    _core.obs.f("_ankh-ui-loaded", opt);

    _core.obs.f("ankh-ui-ready", "ui-button#".concat(id));
  };

  _core.obs.l("_ui-button-init", init);
}();

exports.button = button;
},{"../core":17}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.carousel = void 0;

var _core = require("../core");

// UI carousel
var carousel = function () {
  var init; // @DESC   build new carousel
  // @PARAM  opt.id        MAN {string}  UI id
  // @PARAM  opt.data      MAN {json[]}  carousel contents
  // @PARAM  opt.target    MAN {string}  target node

  init = function init(opt) {
    var $carousel, $t, $ui, data, deg, id, len, ratio, z;
    id = opt.id;
    data = opt.data;
    $t = opt.target;

    if (!id || !(data != null ? data.length : void 0) || !$t) {
      return;
    }

    $ui = (0, _core.$$)("<section/>", {
      id: id,
      "class": "ui-carousel"
    });
    $carousel = (0, _core.$$)("<div/>");
    len = data.length;
    deg = 0;
    ratio = 360 / len;
    z = Math.round(210 / 2) / Math.tan(Math.PI / len);
    data.forEach(function (dta) {
      var $cnt, trf;
      trf = "transform:rotateY(" + deg + "deg) translateZ(" + z + "px)";
      deg += ratio;
      $cnt = (0, _core.$$)("<div/>", {
        "class": "ui-carousel-item",
        style: trf
      });
      Object.keys(dta).forEach(function (key) {
        var $p;
        $p = (0, _core.$$)("<p/>", {
          innerText: dta[key]
        });
        $cnt.appendChild((0, _core.$$)("<h4/>", {
          "data-lang": key
        }));
        return $cnt.appendChild($p);
      });
      return $carousel.appendChild($cnt);
    });
    $ui.appendChild($carousel);
    $t.appendChild($ui);

    _core.obs.f("ankh-ui-ready", "ui-carousel#".concat(id));
  };

  _core.obs.l("_ui-carousel-init", init);
}();

exports.carousel = carousel;
},{"../core":17}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chart = void 0;

var _core = require("../core");

// UI chart
var chart = function () {
  var $chart, $ui, draw;
  $ui = null;
  $chart = null;
  draw = {
    // @DESC   draw a pie chart
    // @PARAM  opt.data  MAN {array}   înput data
    // @RETURN {void}
    pie: function pie(opt) {
      var dta;
      opt = opt || {};
      dta = opt.data;

      if (!dta) {
        return;
      }

      $chart.className = "pie";
      $chart.setAttribute("style", "animation-delay: -60s");
    }
  };
  return {
    // @DESC     build new diagram
    // @PARAM    opt.id      MAN {string}  UI id
    // @PARAM    opt.type    OPT {string}  chart type
    // @PARAM    opt.target  MAN {string}  target node
    // @RETURN  {void}
    // @PUBLIC
    init: function init(opt) {
      var $t, dta, id, type;
      opt = opt || {};
      id = opt.id;
      $t = opt.target;
      type = opt.type || "row";
      dta = opt.data;

      if (!id || !$t) {
        return;
      } // MARKUP chart


      $ui = $$("<div/>", {
        "class": "ui-chart"
      });
      $chart = $$("<div/>");

      switch (type) {
        case "pie":
          draw.pie({
            data: dta
          });
      } // append UI to DOM target


      $ui.appendChild($chart);
      $t.appendChild($ui);
    }
  };
}();

exports.chart = chart;
},{"../core":17}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.context = void 0;

var _core = require("../core");

// UI context
var context = function () {
  var $ui, addContext, d, elms, ui;
  d = document;
  $ui = null;
  elms = [];
  ui = {
    evs: {
      // @DESC   contextmenu was triggered
      // @PARAM  e   MAN {event} context event
      // @RETURN {void}
      contextMenu: function contextMenu(e) {
        e.preventDefault();
        $$.css($ui, {
          left: e.clientX,
          top: e.clientY
        });
        $$.addClass($ui, "active");
      }
    }
  }; // @DESC     context menu listener
  // @PARAM    opt.id      MAN {string}
  // @PARAM    opt.$elm    MAN {node}
  // @RETURN   {void}
  // @PRIVATE

  addContext = function addContext(opt) {
    var $elm, id; // DEFINE variables

    opt = opt || {};
    id = opt.id;
    $elm = $$("#" + id); // LISTEN for right click

    if ($elm) {
      $$.listen($elm, "contextmenu", ui.evs.contextMenu);
    }
  };

  return {
    // @desc     build new context menu
    // @param    opt.id                MAN {string}  UI id
    // @param    opt.elms              MAN {array}   elements with context
    // @param    opt.elements.$.id     MAN {string}  element id
    // @param    opt.elements.$.items  MAN {array}   menu for element
    // @param    opt.elements.$.lang   MAN {string}  lang reference
    // @returns  {void}
    init: function init(opt) {
      var $a, $b, $nav, elm, elmId, i, id, itm, itms, j, len, len1; // DEFINE variables

      opt = opt || {};
      id = opt.id;
      elms = opt.elements;
      $b = $$("body");

      if (!id || !elms) {
        return;
      }

      $ui = $$("<div/>", {
        "class": "ui-context"
      });
      $nav = $$("<nav/>");

      for (i = 0, len = elms.length; i < len; i++) {
        elm = elms[i];
        elmId = elm.id;
        itms = elm.items;

        if (!elmId || !itms) {
          continue;
        }

        for (j = 0, len1 = itms.length; j < len1; j++) {
          itm = itms[j]; // create context menu entry

          $a = $$("<a/>", "data-lang", itm.lang);
          $nav.appendChild($a);
        } // collect elms


        elms.push(elmId); // add right click

        addContext({
          id: elmId
        });
      } // APPEND UI to DOM target


      $ui.appendChild($nav);
      return $b.appendChild($ui);
    }
  };
}();

exports.context = context;
},{"../core":17}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.details = void 0;

var _core = require("../core");

// UI details
var details = function () {
  var init; // @DESC   build new details view
  // @PARAM  opt.id            MAN {string}      ui id
  // @PARAM  opt.ids           OPT {json[]}      children ui configs
  // @PARAM  opt.open          OPT {boolean}     details expanded
  // @PARAM  opt.summary       OPT {json}        summary data
  // @PARAM  opt.summary.lang  MAN {string}      summary lang id
  // @PARAM  opt.target        MAN {HTMLElement} ui target

  init = function init(opt) {
    var $summary, $t, $ui, id, ids, lang, open, summary;
    id = opt.id;
    var _opt$ids = opt.ids;
    ids = _opt$ids === void 0 ? [] : _opt$ids;
    var _opt$open = opt.open;
    open = _opt$open === void 0 ? false : _opt$open;
    var _opt$summary = opt.summary;
    summary = _opt$summary === void 0 ? {} : _opt$summary;
    $t = opt.target;
    lang = summary.lang;

    if (!id || !$t || !lang) {
      return;
    }

    $ui = (0, _core.$$)("<details/>", {
      "class": "ui-details",
      open: open
    });
    $summary = (0, _core.$$)("<summary/>", {
      "data-lang": lang
    });
    $ui.appendChild($summary);
    ids.map(function (ui) {
      ui.target = $ui;
      return _core.obs.f("_ui-".concat(ui.ui, "-init"), ui);
    });
    $t.appendChild($ui);

    _core.obs.f("ankh-ui-ready", "ui-details");
  };

  _core.obs.l("_ui-details-init", init);
}();

exports.details = details;
},{"../core":17}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fab = void 0;

var _core = require("../core");

// UI fab
var fab = function () {
  return {
    // @DESC   build new FAB
    // @PARAM  opt.items             MAN {[json]}  buttons
    // @PARAM  opt.items.$.tooltip   OPT {string}  lang reference
    // @PARAM  opt.action            MAN {?}
    // @PARAM  opt.target            MAN {string}  target node
    // @RETURN {void}
    // @PUBLIC
    init: function init(opt) {
      var $btn, $t, $ui, actn, i, icons, itm, itms, j, len; // DEFINE variables

      opt = opt || {};
      itms = opt.items;
      actn = opt.action;
      $t = opt.target;

      if (!itms || !$t) {
        return;
      } // button wrapper


      $ui = (0, _core.$$)("<nav/>", {
        "class": "ui-fab",
        draggable: "draggable"
      }); // create the main button

      itms.push({
        tooltip: actn
      }); // test

      icons = ["ion-social-facebook", "ion-social-twitter", "ion-social-googleplus", "ion-android-share-alt"]; // ADD buttons

      for (i = j = 0, len = itms.length; j < len; i = ++j) {
        itm = itms[i];
        $btn = (0, _core.$$)("<a/>", {
          href: "#",
          "class": "btn",
          tooltip: item.tooltip
        });
        $btn.appendChild((0, _core.$$)("<i/>", {
          "class": icons[i]
        }));
        $ui.appendChild($btn);
      } // APPEND UI to DOM


      $t.appendChild($ui);
    }
  };
}();

exports.fab = fab;
},{"../core":17}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.html = void 0;

var _core = require("../core");

// UI html
var html = function () {
  var init; // @REQUIRE local modules
  // @PRIVATE
  // @DESC   builds new html node
  // @PARAM  classNames  OPT {string}  css class names
  // @PARAM  id          MAN {string}  ui id
  // @PARAM  lang        OPT {string}  lang id (i18n)
  // @PARAM  src         OPT {string}  path to image
  // @PARAM  target      MAN {node}    target node
  // @PARAM  text        OPT {string}  innerText (bypass i18n)

  init = function init(opt) {
    var $t, $ui, className, classNames, id, ids, lang, m, src, tag, text;
    var _opt$classNames = opt.classNames;
    classNames = _opt$classNames === void 0 ? "" : _opt$classNames;
    id = opt.id;
    var _opt$ids = opt.ids;
    ids = _opt$ids === void 0 ? [] : _opt$ids;
    lang = opt.lang;
    m = opt.media;
    src = opt.src;
    var _opt$tag = opt.tag;
    tag = _opt$tag === void 0 ? "div" : _opt$tag;
    text = opt.text;
    $t = opt.target;

    if (!id || !$t) {
      return;
    }

    if (m && !_core.media.isInViewport(m)) {
      return _core.obs.f("_ankh-ui-not-loaded", opt);
    }

    className = "ui-html ".concat(classNames);
    $ui = (0, _core.$$)("<".concat(tag, "/>"), {
      id: id,
      "class": classNames
    });

    if (src) {
      $ui.setAttribute("src", src);
      $ui.setAttribute("data-lang", lang);
    } else if (lang) {
      $ui.setAttribute("data-lang", lang);
    } else if (text) {
      $ui.innerText = text;
    }

    ids.forEach(function (ui) {
      ui.target = $ui;
      return _core.obs.f("_ui-".concat(ui.ui, "-init"), ui);
    });
    $t.appendChild($ui);

    _core.obs.f("_ankh-ui-loaded", opt);

    _core.obs.f("ankh-ui-ready", "ui-html#".concat(id));
  };

  _core.obs.l("_ui-html-init", init);
}();

exports.html = html;
},{"../core":17}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.icon = void 0;

var _core = require("../core");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var icon = function () {
  var init, ui;
  ui = {
    events: {
      toggleIcon: function toggleIcon(opt) {
        var $icon, $target, icons;
        icons = opt.icons;
        $target = opt.$target;
        $icon = (0, _core.$$)("ion-icon", $target);

        var _icons$filter = icons.filter(function (icon) {
          return $icon.getAttribute("name") !== icon;
        });

        var _icons$filter2 = _slicedToArray(_icons$filter, 1);

        exports.icon = icon = _icons$filter2[0];
        $icon.setAttribute("name", icon);
      }
    }
  }; // @DESC   displays icon
  // @PARAM  opt.id      MAN {string}  ui id
  // @PARAM  opt.icon    MAN {string}  ion icon name
  // @PARAM  opt.events  OPT {json}    custom events
  // @PARAM  media       OPT {json}    viewport config
  // @PARAM  opt.target  MAN {node}    target node
  // @RETURN {node}  ui

  init = function init(opt) {
    var $icon, $t, $ui, events, id, m;
    id = opt.id;
    exports.icon = icon = opt.icon;
    events = opt.events;
    m = opt.media;
    $t = opt.target;

    if (!id || !$t) {
      return;
    }

    if (m && !_core.media.isInViewport(m)) {
      return _core.obs.f("_ankh-ui-not-loaded", opt);
    }

    $icon = (0, _core.$$)("<ion-icon/>", {
      name: icon
    });
    $icon.style.pointerEvents = "none";

    if (events) {
      if (events.click) {
        $ui = (0, _core.$$)("<a/>");
        $ui.append($icon);

        $ui.onclick = function () {
          return events.click.forEach(function (clickEvent) {
            return _core.obs.f("_ankh-ui-fire", clickEvent);
          });
        };
      }
    }

    if (!$ui) {
      $ui = $icon;
    }

    $ui.id = id;
    $ui.className = "ui-icon";
    $ui.events = events;
    $t.appendChild($ui);

    _core.obs.f("_ankh-ui-loaded", opt);

    _core.obs.f("ankh-ui-ready", "ui-icon");
  };

  _core.obs.l("_ui-icon-toggle", function (options) {
    return options.events.click.forEach(function (clickEvent) {
      if (clickEvent.name === "_ui-icon-toggle") {
        return ui.events.toggleIcon(clickEvent);
      }
    });
  });

  _core.obs.l("_ui-icon-init", init);
}();

exports.icon = icon;
},{"../core":17}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iframe = void 0;

var _core = require("../core");

// UI iframe
var iframe = function () {
  var init; // @DESC   init iframe
  // @PARAM  opt.id      MAN {string}  ui id
  // @PARAM  opt.src     MAN {string}  iframe source
  // @PARAM  opt.target  MAN {node}    target node
  // @RETURN {node}  ui

  init = function init(opt) {
    var $t, $ui, id, src;
    id = opt.id;
    src = opt.src;
    $t = opt.target;

    if (!id || !src || !$t) {
      return;
    }

    $ui = (0, _core.$$)("<iframe/>", {
      id: id,
      "class": "ui-iframe",
      src: src
    });
    $t.appendChild((0, _core.$$)("<p/>"));

    _core.obs.f("ankh-ui-ready", "ui-iframe");
  };

  _core.obs.l("_ui-iframe-init", init);
}();

exports.iframe = iframe;
},{"../core":17}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.table = exports.slideshow = exports.slider = exports.select = exports.nav = exports.mcbl = exports.map = exports.list = exports.layout = exports.lang = exports.input = exports.iframe = exports.icon = exports.html = exports.fab = exports.details = exports.context = exports.chart = exports.carousel = exports.button = exports.breadcrumb = exports.article = exports.accordion = void 0;

var _accordion2 = require("./accordion");

var _article2 = require("./article");

var _breadcrumb2 = require("./breadcrumb");

var _button2 = require("./button");

var _carousel2 = require("./carousel");

var _chart2 = require("./chart");

var _context2 = require("./context");

var _details2 = require("./details");

var _fab2 = require("./fab");

var _html2 = require("./html");

var _icon2 = require("./icon");

var _iframe2 = require("./iframe");

var _input2 = require("./input");

var _lang2 = require("./lang");

var _layout2 = require("./layout");

var _list2 = require("./list");

var _map2 = require("./map");

var _mcbl2 = require("./mcbl");

var _nav2 = require("./nav");

var _select2 = require("./select");

var _slider2 = require("./slider");

var _slideshow2 = require("./slideshow");

var _table2 = require("./table");

var accordion = _accordion2.accordion;
exports.accordion = accordion;
var article = _article2.article;
exports.article = article;
var breadcrumb = _breadcrumb2.breadcrumb;
exports.breadcrumb = breadcrumb;
var button = _button2.button;
exports.button = button;
var carousel = _carousel2.carousel;
exports.carousel = carousel;
var chart = _chart2.chart;
exports.chart = chart;
var context = _context2.context; // export countdown = _countdown

exports.context = context;
var details = _details2.details;
exports.details = details;
var fab = _fab2.fab;
exports.fab = fab;
var html = _html2.html;
exports.html = html;
var icon = _icon2.icon;
exports.icon = icon;
var iframe = _iframe2.iframe;
exports.iframe = iframe;
var input = _input2.input;
exports.input = input;
var lang = _lang2.lang;
exports.lang = lang;
var layout = _layout2.layout;
exports.layout = layout;
var list = _list2.list;
exports.list = list;
var map = _map2.map;
exports.map = map;
var mcbl = _mcbl2.mcbl;
exports.mcbl = mcbl;
var nav = _nav2.nav;
exports.nav = nav;
var select = _select2.select; // export sitemap = _sitemap

exports.select = select;
var slider = _slider2.slider;
exports.slider = slider;
var slideshow = _slideshow2.slideshow;
exports.slideshow = slideshow;
var table = _table2.table;
exports.table = table;
},{"./accordion":23,"./article":24,"./breadcrumb":25,"./button":26,"./carousel":27,"./chart":28,"./context":29,"./details":30,"./fab":31,"./html":32,"./icon":33,"./iframe":34,"./input":36,"./lang":37,"./layout":38,"./list":39,"./map":40,"./mcbl":41,"./nav":42,"./select":43,"./slider":44,"./slideshow":45,"./table":46}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.input = void 0;

var _core = require("../core");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var input = function () {
  var init; // @param  disabled      {boolean}
  // @param  id            {string}
  // @param  items         {json[]}      checkbox|radio items
  // @param  media         {json}        viewport config
  // @param  name          {string}
  // @param  type          {string}
  // @param  placeholder   {string}      lang reference
  // @param  required      {boolean}
  // @param  target        {HTMLElement} ui target
  // @param  value         {string}

  init = function init(options) {
    var $t, $ui, disabled, id, items, label, m, name, placeholder, required, st, type;
    disabled = options.disabled;
    id = options.id;
    items = options.items;
    label = options.label;
    m = options.media;
    name = options.name;
    placeholder = options.placeholder;
    required = options.required;
    $t = options.target;
    var _options$type = options.type;
    type = _options$type === void 0 ? "text" : _options$type;

    if (!id || !$t) {
      return;
    }

    if (m && !_core.media.isInViewport) {
      return _core.obs.f("_ankh-ui-not-loaded", options);
    }

    $ui = (0, _core.$$)("<div/>", {
      "class": "ui-input"
    });
    st = _core.state.get({
      id: id
    }) || {};
    (items || [options]).forEach(function (item) {
      var $input, checked;
      id = item.id;
      name = item.name;
      placeholder = item.placeholder;
      disabled = item.disabled;
      required = item.required;
      checked = item.checked;
      label = item.label;
      $input = (0, _core.$$)("<input/>", {
        id: id,
        type: type
      });

      if (name) {
        $input.setAttribute("name", name);
      }

      if (placeholder) {
        $input.setAttribute("data-lang", placeholder);
      }

      if (disabled) {
        $input.setAttribute("disabled", true);
      }

      if (required) {
        $input.setAttribute("required", true);
      }

      if (checked) {
        $input.setAttribute("checked", true);
      }

      if (label) {
        $ui.appendChild((0, _core.$$)("<label/>", {
          "for": id,
          "data-lang": label
        }));
      }

      return $ui.appendChild($input);
    });
    $t.appendChild($ui);
    setTimeout(function () {
      return Object.keys(st).forEach(function (inputId) {
        return (0, _core.$$)("#".concat(inputId)).value = st[inputId];
      });
    });

    _core.$$.listen((0, _core.$$)("input", $t), "keyup", function (event) {
      exports.input = input = event.target;
      return _core.state.set({
        id: id,
        state: _defineProperty({}, input.id, input.value)
      });
    });

    _core.obs.f("_ankh-ui-loaded", options);

    _core.obs.f("ankh-ui-ready", "ui-input#".concat(id));
  };

  return _core.obs.l("_ui-input-init", init);
}();

exports.input = input;
},{"../core":17}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lang = void 0;

var _core = require("../core");

var _i18n = require("../apps/dbp/i18n");

// UI lang
var lang = function () {
  var changeLang, def, init, lib, update; // @DESC   click event to switch lang # @PARAM  event {Event} click on anchor

  changeLang = function changeLang(event) {
    var $a;
    event.preventDefault();
    $a = event.target; // update lang

    _core.obs.f("ui-lang-update", {
      lang: $a.getAttribute("lang")
    }); // update 'active' class


    (0, _core.$$)(".active", $a.parentNode).className = "";
    return $a.className = "active";
  };

  def = "de";
  lib = {
    de: _i18n.de,
    en: _i18n.en
  }; // @DESC   build new language switcher
  // @PARAM  opt.id      MAN {string}  UI id
  // @PARAM  opt.target  MAN {string}  DOM target id
  // @RETURN {void}

  init = function init(opt) {
    var $a, $t, $ui, id, idx, k, self, v;
    id = opt.id;
    $t = opt.target;
    self = this;

    if (!id || !$t) {
      return;
    } // active lang by priority
    // ( localStorage > default )


    exports.lang = lang = _core.state.get({
      id: id
    }) || def; // UI markup

    $ui = (0, _core.$$)("<nav/>", {
      id: id,
      "class": "ui-lang"
    }); // iterate through language lib

    idx = 0;

    for (k in lib) {
      v = lib[k];
      $a = (0, _core.$$)("<a/>", {
        rel: "alternate",
        hreflang: k,
        lang: k
      });
      $a.innerText = k; // SET active class

      if (k === lang) {
        $a.className = "active";
      } // SWITCH lang on click


      _core.$$.listen($a, "click", changeLang); // append UI to DOM target


      $ui.appendChild($a);
    }

    $t.appendChild($ui);

    _core.obs.l("ui-lang-update", update);

    _core.obs.f("ankh-ui-ready", "ui-lang");
  }; // @DESC   update language
  // @PARAM  opt.lang  OPT {string}  language code
  // @RETURN {void}


  update = function update() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var elm, i, index, len, ref, v;
    var _opt$lang = opt.lang;
    exports.lang = lang = _opt$lang === void 0 ? "" : _opt$lang;
    // language by priority
    // ( direct change > localStorage > default )
    // !TODO language by geolocation
    exports.lang = lang = lang || _core.state.get({
      id: "lang"
    }) || def;
    ref = (0, _core.$$)("[data-lang]"); // update elements

    for (index = i = 0, len = ref.length; i < len; index = ++i) {
      elm = ref[index];
      v = lib[lang][elm.getAttribute("data-lang")];

      if (elm.getAttribute("data-lang-rendered")) {
        elm.setAttribute("data-lang-rendered", v);
      } else if (elm.tagName === "IMG") {
        elm.setAttribute("alt", v);
      } else if (elm.tagName === "INPUT") {
        elm.setAttribute("placeholder", v);
      } else {
        elm.innerHTML = v;
      }
    }

    (0, _core.$$)("html").setAttribute("lang", lang);

    _core.state.set({
      id: "lang",
      state: lang
    });

    _core.obs.f("ui-lang-updated");
  };

  _core.obs.l("_ankh-ready", update);

  _core.obs.l("_ui-lang-init", init);

  _core.obs.l("_ankh-viewport-changed", update);
}();

exports.lang = lang;
},{"../apps/dbp/i18n":9,"../core":17}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layout = void 0;

var _core = require("../core");

// UI layout
var layout = function () {
  var ui;
  ui = {
    // @DESC   adds item to flexbox
    // @PARAM  itm         MAN {json}    item conf
    // @PARAM  itm.id      MAN {string}  item id
    // @PARAM  itm.tagName OPT {string}  default 'div'
    // @PARAM  $ui         MAN {node}    flexbox target
    // @RETURN {void}
    addChild: function addChild(itm, $ui) {
      var $itm, elm, id;
      itm = itm || {};
      id = itm.id;

      if (!itm || !$ui) {
        return;
      } // CREATE flexbox item


      elm = itm.tagName || "div";
      $itm = (0, _core.$$)("<" + elm + "/>", {
        id: id
      }); // APPEND item to flexbox

      $ui.appendChild($itm); // RETURN item ref

      return $itm;
    }
  };
  return {
    // @DESC   creates a flexbox layout
    // @PARAM  build new flexbox layout
    // @PARAM  opt.direction       OPT {string}  CSS flex-direction
    // @PARAM  opt.alignItems      OPT {string}  CSS align-items
    // @PARAM  opt.justifyContent  OPT {string}  CSS justify-content
    // @PARAM  opt.target          OPT {string}  target node
    // @RETURN {[ node ]}  array of child nodes
    // PUBLIC
    init: function init(opt) {
      var $t, $ui, i, itm, itms, len, nt;
      opt = opt || {};
      itms = opt.items;
      $t = opt.target;

      if (!itms || !$t) {
        return;
      } // @DEFINE new targets collection


      nt = []; // @MARKUP flexbox

      $ui = (0, _core.$$)("<div/>", {
        "class": "ui-flexbox"
      });

      for (i = 0, len = itms.length; i < len; i++) {
        itm = itms[i]; // @APPEND items to flexbox

        nt.push(ui.addChild(itm, $ui));
      } // @APPEND UI to DOM target


      $t.appendChild($ui); // @RETURN new targets

      return nt;
    }
  };
}();

exports.layout = layout;
},{"../core":17}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.list = void 0;

var _core = require("../core");

// UI list
var list = function () {
  var init, ui; // hammer = require "hammerjs"

  ui = {
    // @DESC   returns nesting level count of the list
    // @PARAM  MAN rootItms {json[]} root list items
    getLevelCount: function getLevelCount(rootItms) {
      var _countLevel, levelCount;

      levelCount = 0;

      _countLevel = function countLevel(itms) {
        return itms.some(function (itm) {
          if (itm.items) {
            _countLevel(itm.items);
          }

          return levelCount++;
        });
      };

      _countLevel(rootItms);

      return levelCount;
    },
    updateRootUlActive: function updateRootUlActive($act) {
      var _climbUp;

      _climbUp = function climbUp($elm) {
        if ($elm.tagName === "UL") {
          _core.$$.addClass($elm, "active");
        }

        if (_core.$$.hasClass(_core.$$.parent($elm), ".ui-list")) {
          return;
        }

        return _climbUp(_core.$$.parent($elm));
      };

      return _climbUp(_core.$$.parent($act));
    },
    // @DESC   updates parent active a elements
    // @PARAM  $act  MAN {HTMLElement} most nested active a
    updateParentActive: function updateParentActive($act) {
      var $parentAct, $parentLi;
      $parentLi = _core.$$.parent(_core.$$.parent($act), "li");

      if (!$parentLi) {
        return;
      }

      $parentAct = (0, _core.$$)("a", $parentLi);
      return _core.$$.addClass($parentAct, "active");
    },
    // @DESC   updates active list items
    // @PARAM  routingMap  {Map}         map (path > id)
    // @PARAM  $ui         {HTMLElement} root list
    updateActive: function updateActive(routingMap, $ui) {
      var $act, actSel, pth;
      pth = location.pathname;
      actSel = "#".concat($ui.id, "_").concat(routingMap.get(pth));
      $act = (0, _core.$$)(actSel, $ui);

      _core.$$.addClass($act, "active");

      if (pth.split("/").length > 1) {
        ui.updateParentActive($act);
      }

      return ui.updateRootUlActive($act);
    },
    // @DESC   creates routing/id map
    // @PARAM  MAN {itms} list items
    createRoutingMap: function createRoutingMap(itms) {
      var _handleSubs, routingMap;

      routingMap = new Map();

      _handleSubs = function handleSubs(subItms) {
        return subItms.map(function (subItm) {
          routingMap.set(subItm.path, subItm.id);

          if (subItm.items) {
            return _handleSubs(subItm.items);
          }
        });
      };

      itms.map(function (itm) {
        routingMap.set(itm.path, itm.id);

        if (itm.items) {
          return _handleSubs(itm.items);
        }
      });
      return routingMap;
    },
    // @DESC   adds list item to list
    // @PARAM  itm                   MAN {json}    list item
    // @PARAM  itm.lang              MAN {string}  lang ref (text or img alt)
    // @PARAM  itm.path              MAN {string}  href
    // @PARAM  itm.type              OPT {string}  adds data-[ type ] = true
    // @PARAM  itm.src               OPT {string}  image src attribute
    // @PARAM  itm.icon              OPT {string}  icon class name
    // @PARAM  itm.events            OPT {json}    custom events
    // @PARAM  itm.events.click      OPT {[json]}  list of 'click' events
    // @PARAM  itm.itms              OPT {todo}    sub items
    // @PARAM  $ul                   MAN {node}    list parent ul (li target)
    // @TODO   only <a> when click event
    addListItem: function addListItem(itm, $ul, uiId) {
      var $itm, $li, $subUl, evs, href, icon, id, lang, src, subItms, type;
      id = itm.id;
      evs = itm.events;
      lang = itm.lang;
      src = itm.src;
      icon = itm.icon;
      href = itm.path;
      type = itm.type;
      subItms = itm.items;

      if (!id || !lang) {
        return;
      }

      $li = (0, _core.$$)("<li/>");

      if (src) {
        $itm = (0, _core.$$)("<img/>", {
          src: src
        });
      } else {
        $itm = (0, _core.$$)("<a/>", {
          id: "".concat($ul.rootId, "_").concat(id)
        });
      }

      if (href) {
        $itm.setAttribute("href", href);
      }

      if (type) {
        $itm.setAttribute("data-" + type, true);
      }

      if (icon) {
        $itm.appendChild((0, _core.$$)("<i/>", {
          "class": icon
        }));
      }

      $itm.setAttribute("data-lang", lang);

      if (evs) {
        $itm.events = evs;

        if (evs.click) {
          $itm.onclick = function () {
            return evs.click.forEach(function (eventName) {
              return _core.obs.f("_ankh-ui-fire", {
                name: eventName,
                target: uiId
              });
            });
          };
        }
      } // hand      = hammer $itm
      // hand.add  new hammer.Tap
      // hand.on   'tap', ui.evs.click


      if (subItms) {
        $subUl = (0, _core.$$)("<ul/>");
        $subUl.rootId = $ul.rootId;
        subItms.forEach(function (subItm) {
          if (evs) {
            subItm.events = evs;
          }

          return ui.addListItem(subItm, $subUl, uiId);
        });
        $li.appendChild($subUl);
      }

      $li.prepend($itm);
      return $ul.appendChild($li);
    },
    evs: {
      // @DESC   fire custom 'click' events
      // @PARAM  e   MAN {Event} 'click' event
      // @RETURN {void}
      click: function click(e) {
        var $elm, ev, evs, i, len, ref;
        e.preventDefault();
        $elm = e.target;

        if ($elm.tagName === "I") {
          $elm = _core.$$.parent($elm);
        }

        evs = (ref = $elm.events) != null ? ref.click : void 0;

        if (!evs || !evs.length) {
          return;
        }

        for (i = 0, len = evs.length; i < len; i++) {
          ev = evs[i];

          _core.obs.f(ev.ev, ev.arg || e);
        }
      }
    }
  }; // @DESC   inits a new list
  // @PARAM  opt.events        OPT {json}      events
  // @PARAM  opt.id            MAN {string}    UI id
  // @PARAM  opt.items         MAN {[json]}    array containing list items
  // @PARAM  opt.target        MAN {node}      target node

  init = function init(opt) {
    var $t, $ui, $ul, events, fx, id, items, levelCount, m, role, routingMap;
    events = opt.events;
    m = opt.media;
    id = opt.id;
    items = opt.items;
    fx = opt.fx;
    role = opt.role;
    $t = opt.target;

    if (!id || !(items != null ? items.length : void 0) || !$t) {
      return;
    }

    if (m && !_core.media.isInViewport(m)) {
      _core.obs.f("_ankh-ui-not-loaded", opt);

      return;
    }

    $ul = (0, _core.$$)("<ul/>");

    if (role === "navigation") {
      $ui = (0, _core.$$)("<nav/>", {
        role: "navigation"
      });
      $ui.appendChild($ul);
    } else {
      $ui = $ul;
    }

    $ui.id = id;
    $ui.className = "ui-list";
    $ul.rootId = id;
    levelCount = ui.getLevelCount(items);
    routingMap = ui.createRoutingMap(items);
    items.map(function (item) {
      item.events = item.events || events;
      return ui.addListItem(item, $ul, id);
    });
    ui.updateActive(routingMap, $ui);
    $t.appendChild($ui);

    _core.obs.f("_ankh-ui-loaded", opt);

    _core.obs.f("ankh-ui-ready", "ui-list#".concat(id));
  };

  _core.obs.l("_helper-site-load", ui.evs.click);

  _core.obs.l("_ui-list-init", init);
}();

exports.list = list;
},{"../core":17}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = void 0;

var _core = require("../core");

// UI map
var map = function () {
  return {
    // @DESC   build new map
    // @PARAM  opt.id                  MAN {string}  UI id
    // @PARAM  opt.center              MAN {string}  map center location
    // @PARAM  opt.width               OPT {integer} map width in px
    // @PARAM  opt.height              OPT {integer} map height in px
    // @PARAM  opt.zoom                OPT {integer} zoom level (0-22)
    // @PARAM  opt.markers             OPT {array}   map marker
    // @PARAM  opt.markers.$.location  MAN {string}  location of marker
    // @PARAM  opt.markers.$.size      OPT {string}  marker size (tiny|small|mid|large)
    // @PARAM  opt.markers.$.color     OPT {string}  marker color in hex (e.g. 'ff0000')
    // @PARAM  opt.markers.$.icon      OPT {string}  path to custom marker icon
    // @PARAM  opt.markers.$.shadow    OPT {boolean} marker gets a shadow
    // @PARAM  opt.target              MAN {string}  target node
    // @RETURN {void}
    // @PUBLIC
    // @REQUIRE local modules
    init: function init(opt) {
      var $img, $map, $t, $ui, center, getScript, h, i, id, initMap, len, m, markers, _mouseOut, mouseOver, mouseWheel, mrk, ref, src, url, w, z;

      initMap = function initMap() {
        return new google.maps.Map(opt.target, {
          center: opt.center,
          scrollwheel: false,
          zoom: 8
        });
      };

      url = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCgbKN00AITyqutT6eyYM_Gf0F55r4JDLU&callback=initMap";

      getScript = function getScript(source, callback) {
        var prior, script;
        script = (0, _core.$$)("<script/>", {
          async: 1
        });
        prior = (0, _core.$$)("script")[0];
        prior.parentNode.insertBefore(script, prior);
        return script.onload = script.onreadystatechange = function (_, isAbort) {
          if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
            script.onload = script.onreadystatechange = null;
            script = void 0;

            if (!isAbort && callback) {
              callback();
            }
          }
        };
      };

      getScript(url, function () {
        return console.log("loaded");
      });
      return; // DEFINE variables

      opt = opt || {};
      id = opt.id;
      center = opt.center.replace(/ /g, "%20");
      $t = opt.target;

      if (!id || !center || !$t) {
        return;
      } // OPTIONAL PARAMs


      w = opt.width || 300;
      h = opt.height || 300;
      z = opt.zoom || 13;
      z = z < 0 ? 0 : z > 22 ? 22 : z;
      markers = ""; // MARKUP UI

      $ui = (0, _core.$$)("<div/>", {
        "class": "ui-map"
      });
      $map = (0, _core.$$)("<div/>", {
        "class": "map"
      }); // ADD markers

      if (opt.markers) {
        ref = opt.markers;

        for (i = 0, len = ref.length; i < len; i++) {
          mrk = ref[i];

          if (!mrk.location) {
            continue;
          }

          m = "&markers="; // SET marker style...

          if (mrk.size) {
            m += "size:" + mrk.size;

            if (mrk.color) {
              m += "%7Ccolor:0x" + mrk.color;
            }

            if (mrk.shadow) {
              m += "%7Cshadow:true";
            } // ...OR custom marker icon...

          } else if (mrk.icon) {
            m += "icon:" + mrk.icon;

            if (mrk.shadow) {
              m += "%7Cshadow:true";
            }
          } else {
            // ...OR default marker style
            m += "size:small%7Cshadow:true";
          } // ADD marker location


          markers += m + "%7C" + mrk.location.replace(/ /g, "%20");
        }
      } // CREATE map


      $img = new Image();
      url = "https://maps.googleapis.com/maps/api/staticmap?center=";
      src = url + center + "&zoom=" + z + "&size=" + w + "x" + h + markers + "&sensor=false";
      $img.src = src; // APPEND UI to DOM target

      $map.appendChild($img);
      $ui.appendChild($map);
      $t.appendChild($ui); // ZOOM by scrolling

      mouseOver = function mouseOver(e) {
        _core.$$.listen($map, "mousewheel", mouseWheel);

        return _core.$$.listen($map, "mouseout", _mouseOut);
      };

      _mouseOut = function mouseOut(e) {
        _core.$$.destroy($map, "mousewheel", mouseWheel);

        return _core.$$.destroy($map, "mouseout", _mouseOut);
      };

      mouseWheel = function mouseWheel(e) {
        e.preventDefault(); // new zoome level

        z = z - e.deltaY / 100; // farest zoom factor

        if (z < 0) {
          z = 0;
          return; // nearest zoom factor
        } else if (z > 22) {
          z = 22;
          return;
        } // REFRESH map with new zoom value


        return $img.src = url + center + "&zoom=" + z + "&size=" + w + "x" + h + markers + "&sensor=false";
      };

      _core.$$.listen($map, "mouseover", mouseOver);
    }
  };
}();

exports.map = map;
},{"../core":17}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mcbl = void 0;

var _core = require("../core");

// UI mcbl
// @DESC modular content block layout
var mcbl = function () {
  return {
    // @DESC   build new article
    // @PARAM  opt.title           {string}  title
    // @PARAM  opt.items           {[json]}  paragraph or code block
    // @PARAM  opt.items.$.lang    {json}    id to paragraph text or programming lang
    // @PARAM  opt.items.$.code    {json}    code block with syntax highlighting
    // @PARAM  opt.author          {json}    author object
    // @PARAM  opt.author.username {string}  author username
    // @PARAM  opt.author.email    {string}  author email
    // @PARAM  opt.author.website  {string}  author website
    // @PARAM  opt.createdAt       {date}    date of article creation
    init: function init(opt) {
      var $address, $code, $elm, $footer, $pre, $t, $time, $title, $ui, i, itm, itms, len, title; // DEFINE variables

      opt = opt || {};
      $t = opt.target;
      title = opt.title;
      itms = opt.items;

      if (!$t || !title || !itms) {
        return;
      } // MARKUP UI


      $ui = (0, _core.$$)("<article/>", {
        "class": "ui-article"
      }); // ADD article title

      $title = (0, _core.$$)("<h2/>", {
        "data-lang": title
      });
      $ui.appendChild($title); // ADD article items

      for (i = 0, len = itms.length; i < len; i++) {
        itm = itms[i]; // code block

        if (itm.code) {
          $pre = (0, _core.$$)("<pre/>");
          $code = (0, _core.$$)("<code/>", {
            "class": itm.lang
          });
          $code.innerHTML = itm.code;
          $pre.appendChild($code);
          $elm = (0, _core.$$)("<p/>").appendChild($pre);
        } else {
          // normal paragraph
          $elm = (0, _core.$$)("<p/>", {
            "data-lang": itm.lang
          });
        }

        $ui.appendChild($elm);
      } // article footer required?


      if (opt.author || opt.createdAt) {
        $footer = (0, _core.$$)("<footer/>"); // add article author

        if (opt.author) {
          $address = (0, _core.$$)("<address/>");
          $address.innerText = "by " + opt.author.username;
          $footer.appendChild($address);
        } // add article creation date


        if (opt.createdAt) {
          $time = (0, _core.$$)("<time/>", {
            datetime: opt.createdAt,
            pubdate: "pubdate"
          });
          $time.innerHTML = moment(opt.createdAt).fromNow();
          $footer.appendChild($time);
        } // APPEND UI to DOM target


        $ui.appendChild($footer);
      }

      $t.appendChild($ui);
    }
  };
}();

exports.mcbl = mcbl;
},{"../core":17}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nav = void 0;

var _core = require("../core");

// UI nav
var nav = function () {
  var init; // @PARAM  events  OPT {json}    event configs
  // @PARAM  id      MAN {string}  UI id
  // @PARAM  items   OPT {array}   menu items
  // @PARAM  media   OPT {json}    viewport config
  // @PARAM  target  MAN {node}    target node
  // @PARAM  type    OPT {string}  only 'sitemap' atm

  init = function init(opt) {
    var $t, $ui, events, id, items, m, type;
    id = opt.id;
    var _opt$events = opt.events;
    events = _opt$events === void 0 ? {} : _opt$events;
    m = opt.media;
    var _opt$items = opt.items;
    items = _opt$items === void 0 ? [] : _opt$items;
    $t = opt.target;
    type = opt.type;

    if (!id || !$t) {
      return;
    }

    $ui = (0, _core.$$)("<nav/>", {
      id: id,
      "class": "ui-nav",
      role: "navigation"
    });

    _core.obs.f("_ui-list-init", {
      events: events,
      id: id,
      items: items,
      target: $ui
    });

    $t.appendChild($ui);
  }; // obs.f "_ankh-ui-loaded", opt
  // obs.f 'ankh-ui-ready' is fired in the list


  _core.obs.l("_ui-nav-init", init);

  _core.$$.listen(window, "popstate", function (e) {
    return e.preventDefault();
  });
}();

exports.nav = nav;
},{"../core":17}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.select = void 0;

var _core = require("../core");

// UI select
var select = function () {
  var init, ui;
  ui = {
    get$Option: function get$Option(option) {
      var $option, attrs, lang;
      var _option$attrs = option.attrs;
      attrs = _option$attrs === void 0 ? {} : _option$attrs;
      lang = option.lang;
      $option = (0, _core.$$)("<option/>", {
        "data-lang": lang
      });
      Object.keys(attrs).map(function (attrKey) {
        return $option.setAttribute(attrKey, attrs[attrKey]);
      });
      return $option;
    }
  }; // @DESC   creates a <select> element
  // @PARAM  id        MAN {string}      ui id
  // @PARAM  options   MAN {json[]}      select options
  // @PARAM  target    MAN {HTMLElement} ui target

  init = function init(opt) {
    var $options, $t, $ui, id, options;
    id = opt.id;
    options = opt.options;
    $t = opt.target;

    if (!id || !(options != null ? options.length : void 0) || !$t) {
      return;
    }

    $ui = (0, _core.$$)("<select/>", {
      "class": "ui-select",
      id: id
    });
    $options = options.map(function (option) {
      var $option;
      return $option = ui.get$Option(option);
    });

    _core.$$.append($options, $ui);

    $t.appendChild($ui);

    _core.obs.f("ankh-ui-ready", "ui-select#".concat(id));
  };

  _core.obs.l("_ui-select-init", init);
}();

exports.select = select;
},{"../core":17}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slider = void 0;

var _core = require("../core");

// UI slider
var slider = function () {
  var init, ui;
  ui = {
    events: {
      toggle: function toggle(opt) {
        var $target, side;
        var _opt$side = opt.side;
        side = _opt$side === void 0 ? "left" : _opt$side;
        $target = opt.$target;
        return _core.$$.toggleClass((0, _core.$$)("#front"), "from-".concat(side));
      }
    }
  }; // @DESC   create a new slider
  // @PARAM  opt.id      MAN {string}  UI id
  // @PARAM  opt.ids     OPT {any[]}   children ui configs
  // @PARAM  media       OPT {json}    viewport config
  // @PARAM  opt.target  MAN {node}    target node

  init = function init(opt) {
    var $t, $ui, id, ids, m;
    id = opt.id;
    m = opt.media;
    $t = opt.target;
    var _opt$ids = opt.ids;
    ids = _opt$ids === void 0 ? [] : _opt$ids;

    if (!id || !$t) {
      return;
    }

    if (m && !_core.media.isInViewport(m)) {
      return _core.obs.f("_ankh-ui-not-loaded", opt);
    }

    $ui = (0, _core.$$)("<div/>", {
      id: id,
      "class": "ui-slider"
    });
    ids.forEach(function (ui) {
      ui.target = $ui;
      return _core.obs.f("_ui-".concat(ui.ui, "-init"), ui);
    });
    $t.appendChild($ui);

    _core.obs.f("_ankh-ui-loaded", opt);

    _core.obs.f("ankh-ui-ready", "ui-slider");
  };

  _core.obs.l("_ui-slider-toggle", function (options) {
    return options.events.click.forEach(function (clickEvent) {
      if (clickEvent.name === "_ui-slider-toggle") {
        return ui.events.toggle(clickEvent);
      }
    });
  });

  _core.obs.l("_ui-slider-init", init);
}();

exports.slider = slider;
},{"../core":17}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slideshow = void 0;

var _core = require("../core");

// UI slideshow
var slideshow = function () {
  var $ui, ui;
  $ui = null;
  ui = {
    $tpl: (0, _core.$$)("<section/>", {
      "class": "ui-slideshow"
    }),
    // @DESC   appends image to slideshow
    // @PARAM  img     MAN {json}  image
    // @PARAM  $ul     MAN {node}  image target
    addImage: function addImage(img, $ul) {
      var $img, $li, alt, src, title, txt; // DEFINE variables

      img = img || {};
      src = img.src;
      alt = img.alt;
      title = img.title;
      txt = img.text;

      if (!src || !alt || !$ul) {
        return;
      } // APPEND image to slider


      $li = (0, _core.$$)("<li/>");
      $img = (0, _core.$$)("<img/>", {
        src: src,
        "data-href": alt
      }); // APPEND title / text

      if (title) {
        $li.append((0, _core.$$)("<h1/>", {
          "data-lang": title
        }));
      }

      if (txt) {
        $li.append((0, _core.$$)("<p/>", {
          "data-lang": txt
        }));
      }

      $li.appendChild($img);
      $ul.appendChild($li);
    },
    // @DESC   handle nav toggle (open/close slide)
    // @PARAM  int   OPT {number}  interval of slides
    // @PARAM  $ul   MAN {node}    image target node
    slide: function slide(_int, $ul) {
      var itmC, maxL, pos; // DEFINE variables

      itmC = (0, _core.$$)("li", $ul).length;
      maxL = itmC * -100;
      pos = 0; // START slide interval

      setInterval(function () {
        // GET next position
        pos -= 100; // LAST image

        if (pos === maxL) {
          pos = 0;
        } // SLIDE to next image


        return _core.$$.css($ul, {
          marginLeft: pos + "vw"
        });
      }, _int);
    }
  };
  return {
    // @DESC   build new slideshow
    // @PARAM  opt.id              MAN {string}  UI id
    // @PARAM  opt.items           MAN {array}   images
    // @PARAM  opt.items.$.src     MAN {string}  image path
    // @PARAM  opt.items.$.active  OPT {boolean} default image
    // @PARAM  opt.items.$.title   OPT {string}  lang ref
    // @PARAM  opt.items.$.text    OPT {string}  lang ref
    // @PARAM  opt.interval        OPT {number}  interval in ms
    // @PARAM  opt.target          MAN {node}    target node
    init: function init(opt) {
      var $t, $ul, i, id, _int2, itm, itms, len;

      opt = opt || {};
      id = opt.id;
      itms = opt.items;
      $t = opt.target;
      _int2 = opt.interval || 8000;

      if (!id || !itms || !$t) {
        return;
      } // MARKUP slideshow


      $ui = ui.$tpl.cloneNode();
      $ui.id = id;
      $ul = (0, _core.$$)("<ul/>");

      for (i = 0, len = itms.length; i < len; i++) {
        itm = itms[i]; // APPEND images to slideshow

        ui.addImage(itm, $ul);
      } // APPEND UI to target


      $ui.appendChild($ul);
      $t.appendChild($ui); // SLIDE images

      ui.slide(_int2, $ul);
    }
  };
}();

exports.slideshow = slideshow;
},{"../core":17}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.table = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _core = require("../core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var table = function () {
  var adjust, adjustWidths, d, get$Td, getDynamicThs, getFixedThs, getPdg, getRequiredTdWidths, getRequiredThWidths, getRequiredWidths, init, isTooSmall;
  d = document;

  getPdg = function getPdg($ths) {
    return $ths.map(function ($th) {
      return parseInt(_core.$$.css($th, "paddingLeft")) + parseInt(_core.$$.css($th, "paddingRight"));
    }).reduce(function (a, b) {
      return a + b;
    });
  };

  get$Td = function get$Td(innerTexts) {
    return innerTexts.forEach(function (innerText) {
      return $tr.appendChild((0, _core.$$)("<td/>", {
        "data-lang": true,
        "data-lang-rendered": true,
        innerText: innerText
      }));
    });
  };

  getDynamicThs = function getDynamicThs($ths) {
    return $ths.filter(function ($th) {
      return !!!$th.getAttribute("data-width");
    });
  };

  getFixedThs = function getFixedThs($ths) {
    return $ths.filter(function ($th) {
      return !!$th.getAttribute("data-width");
    });
  };

  getRequiredWidths = function getRequiredWidths($ths, $ui) {
    var reqTdW, reqThW;
    reqTdW = getRequiredTdWidths($ths, $ui);
    reqThW = getRequiredThWidths($ths);
    return reqTdW.map(function (w, index) {
      return Math.max(w, reqThW[index]);
    });
  };

  getRequiredThWidths = function getRequiredThWidths($ths) {
    var $dynamicThs, fs;
    $dynamicThs = getDynamicThs($ths);
    fs = parseInt(_core.$$.css($dynamicThs[0], "fontSize"));
    return $dynamicThs.map(function ($th) {
      return _core.$$.measure($th.innerText, fs).w;
    });
  };

  getRequiredTdWidths = function getRequiredTdWidths($ths, $ui) {
    var $firstTd, fs;
    $firstTd = (0, _core.$$)("td[data-col-index]", $ui)[0];
    fs = parseInt(_core.$$.css($firstTd, "fontSize"));
    return getDynamicThs($ths).map(function ($th) {
      var $td, currency, index, toMeasure;
      index = parseInt($th.getAttribute("data-col-index"));
      $td = (0, _core.$$)("td[data-col-index='".concat(index, "']"), $ui)[0];
      currency = $td.getAttribute("data-currency");
      toMeasure = currency ? "".concat(currency.toUpperCase(), " ").concat($td.innerText) : $td.innerText;
      return _core.$$.measure(toMeasure, fs).w;
    });
  };

  adjustWidths = function adjustWidths(adjustedWidths, delta, threshold) {
    var _adjust, adjW;

    adjW = _toConsumableArray(adjustedWidths);

    _adjust = function _adjust(delta) {
      var maxIndex, maxReqW, minComp, minIndex, minReqW, newMin;
      minReqW = Math.min.apply(Math, _toConsumableArray(adjW));
      maxReqW = Math.max.apply(Math, _toConsumableArray(adjW));
      newMin = threshold - delta;
      minComp = newMin - minReqW;
      maxIndex = adjW.indexOf(Math.max.apply(Math, _toConsumableArray(adjW)));
      minIndex = adjW.indexOf(Math.min.apply(Math, _toConsumableArray(adjW)));
      adjW[maxIndex] = maxReqW - minComp;
      adjW[minIndex] = newMin;
    };

    while (isTooSmall(adjustedWidths, delta, threshold)) {
      _adjust(delta);
    }

    return adjW;
  };

  isTooSmall = function isTooSmall(adjustedWidths, delta, threshold) {
    var tooSmall;
    tooSmall = Math.min.apply(Math, _toConsumableArray(adjustedWidths)) + delta < threshold;
    return tooSmall > threshold;
  };

  adjust = function adjust(opt) {
    var $dynamicThs, $fixedThs, $parent, $target, $thead, $ths, adjustedWidths, delta, fixedWSum, maxW, ref, reqWSum, threshold, totalAdj;
    var _opt$threshold = opt.threshold;
    threshold = _opt$threshold === void 0 ? 80 : _opt$threshold;
    $target = opt.$target;
    $parent = _core.$$.parent($target);
    $thead = (0, _core.$$)("thead", $target);
    $ths = Array.from((0, _core.$$)("th", $target));
    $dynamicThs = getDynamicThs($ths);
    $fixedThs = getFixedThs($ths);
    adjustedWidths = ((ref = _core.state.get({
      id: $target.id
    })) != null ? ref.adjustedWidths : void 0) || getRequiredWidths($ths); // mobile viewport

    if (_core.$$.css($thead, "position") === "absolute") {
      return;
    }

    $fixedThs.forEach(function ($th) {
      var index;
      index = parseInt($th.getAttribute("data-col-index"));
      return _core.$$.css("[data-col-index='".concat(index, "']"), {
        width: "".concat($th.getAttribute("data-width"), "px")
      });
    }); // exclude td's with fixed width

    fixedWSum = $fixedThs.map(function ($th) {
      return parseInt($th.getAttribute("data-width"));
    }).reduce(function (a, b) {
      return a + b;
    });
    maxW = $parent.clientWidth - fixedWSum;
    totalAdj = adjustedWidths.reduce(function (a, b) {
      return a + b;
    });
    reqWSum = totalAdj + getPdg($ths);
    delta = (maxW - reqWSum) / $dynamicThs.length;

    if (delta < 0) {
      adjustedWidths = adjustWidths(adjustedWidths, delta, threshold);

      _core.state.set({
        id: $target.id,
        state: {
          adjustedWidths: adjustedWidths
        }
      });
    }

    return $dynamicThs.forEach(function ($th, index) {
      var colIndex;
      colIndex = parseInt($th.getAttribute("data-col-index"));
      return _core.$$.css("[data-col-index='".concat(colIndex, "']"), {
        width: "".concat(adjustedWidths[index] + delta, "px")
      });
    });
  }; // @PARAM    id      MAN {string}      ui id
  // @PARAM    cols    MAN {json}        column config
  // @PARAM    data    MAN {json[]}      array with data objects
  // @PARAM    media   OPT {json}        viewport config
  // @PARAM    target  MAN {HTMLElement} target node


  init = function init(opt) {
    var $img, $t, $tbody, $thead, $theadTr, $ths, $trs, $ui, adjustEvent, cols, data, fireAdjustEvent, id, m, pagination;
    id = opt.id;
    cols = opt.cols;
    data = opt.data;
    m = opt.media;
    pagination = opt.pagination;
    $t = opt.target;

    if (!id || !cols || !(data != null ? data.length : void 0) || !$t) {
      return;
    }

    if (m && !_core.media.isInViewport(m)) {
      return _core.obs.f("_ankh-ui-not-loaded", opt);
    }

    $ui = (0, _core.$$)("<table/>", {
      "class": "ui-table",
      id: id
    });
    $thead = (0, _core.$$)("<thead/>");
    $theadTr = (0, _core.$$)("<tr/>");
    $tbody = (0, _core.$$)("<tbody/>");
    $img = (0, _core.$$)("<img/>"); // build all <th>'s

    $ths = cols.map(function (col, index) {
      var $th;
      $th = (0, _core.$$)("<th/>", {
        "data-col-index": index
      });

      if (col.lang) {
        $th.setAttribute("data-lang", col.lang);
      }

      if (col.svg) {
        $th.setAttribute("data-svg", true);
      }

      if (col.date) {
        $th.setAttribute("data-date", true);
      }

      if (col.currency) {
        $th.setAttribute("data-currency", col.currency);
      }

      if (col.right) {
        _core.$$.addClass($th, "right");
      }

      if (col.width) {
        $th.setAttribute("data-width", col.width);
      }

      return $th;
    }); // build all <tr>'s with data

    $trs = data.map(function (tr) {
      var $tr;
      $tr = (0, _core.$$)("<tr/>");
      cols.forEach(function (col, index) {
        var $svg, $td, v;
        $td = (0, _core.$$)("<td/>");
        $td.setAttribute("data-col-index", index); // type: svg

        if (col.svg) {
          $svg = (0, _core.$$)("<img/>", {
            src: "/assets/svg/".concat(col.svg, ".svg")
          });
          $td.appendChild($svg); // type: text
        } else if (col.lang) {
          $td.setAttribute("data-lang-rendered", true);
          $td.setAttribute("data-lang", col.lang);
          v = tr[col.lang];

          if (col.date) {
            v = (0, _moment["default"])(v).format("DD/YY");
            $td.setAttribute("data-date", true);
          } else if (col.currency) {
            v = v.toLocaleString("de");
            $td.setAttribute("data-currency", col.currency);
          }

          $td.innerText = v;
        }

        if (col.right) {
          _core.$$.addClass($td, "right");
        }

        return $tr.appendChild($td);
      });
      return $tr;
    });

    _core.$$.append($ths, $theadTr);

    $thead.appendChild($theadTr);

    _core.$$.append($trs, $tbody);

    $ui.appendChild($thead);
    $ui.appendChild($tbody);
    $t.appendChild($ui);

    if (!opt.events) {
      opt.events = {};
    }

    adjustEvent = {
      name: "ui-table-adjust",
      target: id
    };
    opt.events.resize = [adjustEvent];

    fireAdjustEvent = function fireAdjustEvent() {
      return _core.obs.f("_ankh-ui-fire", adjustEvent);
    };

    _core.obs.l("ui-table-adjust", function (options) {
      return options.events.resize.forEach(function (resizeEvent) {
        return adjust(resizeEvent);
      });
    });

    _core.obs.l("_ankh-resize", fireAdjustEvent);

    _core.obs.l("ui-lang-updated", fireAdjustEvent);

    _core.obs.f("_ankh-ui-loaded", opt);

    _core.obs.f("ankh-ui-ready", "ui-table#".concat(id));
  };

  _core.obs.l("_ui-table-init", init);
}();

exports.table = table;
},{"../core":17,"moment":57}],47:[function(require,module,exports){
var Modernizr = require('./lib/Modernizr'),
    ModernizrProto = require('./lib/ModernizrProto'),
    classes = require('./lib/classes'),
    testRunner = require('./lib/testRunner'),
    setClasses = require('./lib/setClasses');

// Run each test
testRunner();

// Remove the "no-js" class if it exists
setClasses(classes);

delete ModernizrProto.addTest;
delete ModernizrProto.addAsyncTest;

// Run the things that are supposed to run after the tests
for (var i = 0; i < Modernizr._q.length; i++) {
  Modernizr._q[i]();
}

module.exports = Modernizr;

},{"./lib/Modernizr":48,"./lib/ModernizrProto":49,"./lib/classes":50,"./lib/setClasses":54,"./lib/testRunner":55}],48:[function(require,module,exports){
var ModernizrProto = require('./ModernizrProto.js');
  // Fake some of Object.create so we can force non test results to be non "own" properties.
  var Modernizr = function() {};
  Modernizr.prototype = ModernizrProto;

  // Leak modernizr globally when you `require` it rather than force it here.
  // Overwrite name so constructor name is nicer :D
  Modernizr = new Modernizr();

  module.exports = Modernizr;


},{"./ModernizrProto.js":49}],49:[function(require,module,exports){
var tests = require('./tests.js');
  /**
   * ModernizrProto is the constructor for Modernizr
   *
   * @class
   * @access public
   */
  var ModernizrProto = {
    // The current version, dummy
    _version: '3.6.0 (browsernizr 2.3.0)',

    // Any settings that don't work as separate modules
    // can go in here as configuration.
    _config: {
      'classPrefix': '',
      'enableClasses': true,
      'enableJSClass': true,
      'usePrefixes': true
    },

    // Queue of tests
    _q: [],

    // Stub these for people who are listening
    on: function(test, cb) {
      // I don't really think people should do this, but we can
      // safe guard it a bit.
      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
      // This is in case people listen to synchronous tests. I would leave it out,
      // but the code to *disallow* sync tests in the real version of this
      // function is actually larger than this.
      var self = this;
      setTimeout(function() {
        cb(self[test]);
      }, 0);
    },

    addTest: function(name, fn, options) {
      tests.push({name: name, fn: fn, options: options});
    },

    addAsyncTest: function(fn) {
      tests.push({name: null, fn: fn});
    }
  };

  module.exports = ModernizrProto;


},{"./tests.js":56}],50:[function(require,module,exports){

  var classes = [];
  module.exports = classes;


},{}],51:[function(require,module,exports){

  /**
   * docElement is a convenience wrapper to grab the root element of the document
   *
   * @access private
   * @returns {HTMLElement|SVGElement} The root element of the document
   */
  var docElement = document.documentElement;
  module.exports = docElement;


},{}],52:[function(require,module,exports){

  /**
   * is returns a boolean if the typeof an obj is exactly type.
   *
   * @access private
   * @function is
   * @param {*} obj - A thing we want to check the type of
   * @param {string} type - A string to compare the typeof against
   * @returns {boolean} true if the typeof the first parameter is exactly the specified type, false otherwise
   */
  function is(obj, type) {
    return typeof obj === type;
  }

  module.exports = is;


},{}],53:[function(require,module,exports){
var docElement = require('./docElement.js');
  /**
   * A convenience helper to check if the document we are running in is an SVG document
   *
   * @access private
   * @returns {boolean}
   */
  var isSVG = docElement.nodeName.toLowerCase() === 'svg';

  module.exports = isSVG;


},{"./docElement.js":51}],54:[function(require,module,exports){
var Modernizr = require('./Modernizr.js');
var docElement = require('./docElement.js');
var isSVG = require('./isSVG.js');
  /**
   * setClasses takes an array of class names and adds them to the root element
   *
   * @access private
   * @function setClasses
   * @param {string[]} classes - Array of class names
   */
  // Pass in an and array of class names, e.g.:
  //  ['no-webp', 'borderradius', ...]
  function setClasses(classes) {
    var className = docElement.className;
    var classPrefix = Modernizr._config.classPrefix || '';

    if (isSVG) {
      className = className.baseVal;
    }

    // Change `no-js` to `js` (independently of the `enableClasses` option)
    // Handle classPrefix on this too
    if (Modernizr._config.enableJSClass) {
      var reJS = new RegExp('(^|\\s)' + classPrefix + 'no-js(\\s|$)');
      className = className.replace(reJS, '$1' + classPrefix + 'js$2');
    }

    if (Modernizr._config.enableClasses) {
      // Add the new classes
      if (classes.length > 0) {
        className += ' ' + classPrefix + classes.join(' ' + classPrefix);
      }
      if (isSVG) {
        docElement.className.baseVal = className;
      } else {
        docElement.className = className;
      }
    }
  }

  module.exports = setClasses;


},{"./Modernizr.js":48,"./docElement.js":51,"./isSVG.js":53}],55:[function(require,module,exports){
var tests = require('./tests.js');
var Modernizr = require('./Modernizr.js');
var classes = require('./classes.js');
var is = require('./is.js');
  /**
   * Run through all tests and detect their support in the current UA.
   *
   * @access private
   * @returns {void}
   */
  function testRunner() {
    var featureNames;
    var feature;
    var aliasIdx;
    var result;
    var nameIdx;
    var featureName;
    var featureNameSplit;

    for (var featureIdx in tests) {
      if (tests.hasOwnProperty(featureIdx)) {
        featureNames = [];
        feature = tests[featureIdx];
        // run the test, throw the return value into the Modernizr,
        // then based on that boolean, define an appropriate className
        // and push it into an array of classes we'll join later.
        //
        // If there is no name, it's an 'async' test that is run,
        // but not directly added to the object. That should
        // be done with a post-run addTest call.
        if (feature.name) {
          featureNames.push(feature.name.toLowerCase());

          if (feature.options && feature.options.aliases && feature.options.aliases.length) {
            // Add all the aliases into the names list
            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
            }
          }
        }

        // Run the test, or use the raw value if it's not a function
        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;

        // Set each of the names on the Modernizr object
        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
          featureName = featureNames[nameIdx];
          // Support dot properties as sub tests. We don't do checking to make sure
          // that the implied parent tests have been added. You must call them in
          // order (either in the test, or make the parent test a dependency).
          //
          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
          // hashtag famous last words
          featureNameSplit = featureName.split('.');

          if (featureNameSplit.length === 1) {
            Modernizr[featureNameSplit[0]] = result;
          } else {
            // cast to a Boolean, if not one already
            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
            }

            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
          }

          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
        }
      }
    }
  }
  module.exports = testRunner;


},{"./Modernizr.js":48,"./classes.js":50,"./is.js":52,"./tests.js":56}],56:[function(require,module,exports){

  var tests = [];
  module.exports = tests;


},{}],57:[function(require,module,exports){
//! moment.js

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

},{}]},{},[1]);
